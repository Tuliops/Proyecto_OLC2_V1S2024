window.PARSE = // @generated by Peggy 4.0.3.
//
// https://peggyjs.org/
(function() {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "\n";
  var peg$c1 = "@";
  var peg$c2 = ".";
  var peg$c3 = "align";
  var peg$c4 = "ascii";
  var peg$c5 = "asciz";
  var peg$c6 = "balign";
  var peg$c7 = "bss";
  var peg$c8 = "byte";
  var peg$c9 = "comm";
  var peg$c10 = "data";
  var peg$c11 = "double";
  var peg$c12 = "end";
  var peg$c13 = "equ";
  var peg$c14 = "extern";
  var peg$c15 = "file";
  var peg$c16 = "float";
  var peg$c17 = "global";
  var peg$c18 = "hword";
  var peg$c19 = "incbin";
  var peg$c20 = "include";
  var peg$c21 = "int";
  var peg$c22 = "long";
  var peg$c23 = "p2align";
  var peg$c24 = "quad";
  var peg$c25 = "section";
  var peg$c26 = "set";
  var peg$c27 = "size";
  var peg$c28 = "skip";
  var peg$c29 = "space";
  var peg$c30 = "string";
  var peg$c31 = "text";
  var peg$c32 = "type";
  var peg$c33 = "word";
  var peg$c34 = "zero";
  var peg$c35 = "adc";
  var peg$c36 = "s";
  var peg$c37 = "add";
  var peg$c38 = "adr";
  var peg$c39 = "adrp";
  var peg$c40 = "cmn";
  var peg$c41 = "cmp";
  var peg$c42 = "madd";
  var peg$c43 = "mneg";
  var peg$c44 = "msub";
  var peg$c45 = "mul";
  var peg$c46 = "neg";
  var peg$c47 = "ngc";
  var peg$c48 = "sbc";
  var peg$c49 = "sdiv";
  var peg$c50 = "smaddl";
  var peg$c51 = "smnegl";
  var peg$c52 = "smsubl";
  var peg$c53 = "smulh";
  var peg$c54 = "smull";
  var peg$c55 = "sub";
  var peg$c56 = "udiv";
  var peg$c57 = "umaddl";
  var peg$c58 = "umnegl";
  var peg$c59 = "umsubl";
  var peg$c60 = "umulh";
  var peg$c61 = "umull";
  var peg$c62 = "bfi";
  var peg$c63 = "bfxil";
  var peg$c64 = "cls";
  var peg$c65 = "clz";
  var peg$c66 = "extr";
  var peg$c67 = "rbit";
  var peg$c68 = "rev";
  var peg$c69 = "rev16";
  var peg$c70 = "rev32";
  var peg$c71 = "bfiz";
  var peg$c72 = "bfx";
  var peg$c73 = "xt";
  var peg$c74 = "sxtw";
  var peg$c75 = "and";
  var peg$c76 = "asr";
  var peg$c77 = "bic";
  var peg$c78 = "eon";
  var peg$c79 = "eor";
  var peg$c80 = "lsl";
  var peg$c81 = "lsr";
  var peg$c82 = "mov";
  var peg$c83 = "movk";
  var peg$c84 = "movn";
  var peg$c85 = "movz";
  var peg$c86 = "mvn";
  var peg$c87 = "orn";
  var peg$c88 = "orr";
  var peg$c89 = "ror";
  var peg$c90 = "tst";
  var peg$c91 = "b";
  var peg$c92 = "bcc";
  var peg$c93 = "bl";
  var peg$c94 = "blr";
  var peg$c95 = "br";
  var peg$c96 = "cbnz";
  var peg$c97 = "cbz";
  var peg$c98 = "ret";
  var peg$c99 = "tbnz";
  var peg$c100 = "tbz";
  var peg$c101 = "ccmn";
  var peg$c102 = "ccmp";
  var peg$c103 = "cinc";
  var peg$c104 = "cinv";
  var peg$c105 = "cneg";
  var peg$c106 = "csel";
  var peg$c107 = "cset";
  var peg$c108 = "csetm";
  var peg$c109 = "csinc";
  var peg$c110 = "csinv";
  var peg$c111 = "csneg";
  var peg$c112 = "ldp";
  var peg$c113 = "ldpsw";
  var peg$c114 = "ld";
  var peg$c115 = "u";
  var peg$c116 = "r";
  var peg$c117 = "rs";
  var peg$c118 = "rsw";
  var peg$c119 = "prfm";
  var peg$c120 = "stp";
  var peg$c121 = "st";
  var peg$c122 = "cas";
  var peg$c123 = "a";
  var peg$c124 = "l";
  var peg$c125 = "casp";
  var peg$c126 = "p";
  var peg$c127 = "ldao";
  var peg$c128 = "stao";
  var peg$c129 = "swp";
  var peg$c130 = "clr";
  var peg$c131 = "crc32";
  var peg$c132 = "crc32w";
  var peg$c133 = "crc32x";
  var peg$c134 = "crc32c";
  var peg$c135 = "crc32cw";
  var peg$c136 = "crc32cx";
  var peg$c137 = "xp";
  var peg$c138 = "x";
  var peg$c139 = "ldnp";
  var peg$c140 = "ldtr";
  var peg$c141 = "ldtrs";
  var peg$c142 = "ldtrsw";
  var peg$c143 = "stlr";
  var peg$c144 = "xr";
  var peg$c145 = "stnp";
  var peg$c146 = "sttr";
  var peg$c147 = "at";
  var peg$c148 = "brk";
  var peg$c149 = "clrex";
  var peg$c150 = "dmb";
  var peg$c151 = "dsb";
  var peg$c152 = "eret";
  var peg$c153 = "hvc";
  var peg$c154 = "isb";
  var peg$c155 = "mrs";
  var peg$c156 = "msr";
  var peg$c157 = "nop";
  var peg$c158 = "sev";
  var peg$c159 = "sevl";
  var peg$c160 = "smc";
  var peg$c161 = "svc";
  var peg$c162 = "wfe";
  var peg$c163 = "wfi";
  var peg$c164 = "yield";
  var peg$c165 = "#";
  var peg$c166 = "pldl1keep";
  var peg$c167 = "pld1strm";
  var peg$c168 = "pld2keep";
  var peg$c169 = "pld2strm";
  var peg$c170 = "pldl3keep";
  var peg$c171 = "pld3strm";
  var peg$c172 = "pstl1keep";
  var peg$c173 = "pst1strm";
  var peg$c174 = "pstl2keep";
  var peg$c175 = "pst2strm";
  var peg$c176 = "pstl3keep";
  var peg$c177 = "pst3strm";
  var peg$c178 = "pli";
  var peg$c179 = "osh";
  var peg$c180 = "nsh";
  var peg$c181 = "ish";
  var peg$c182 = "sy";
  var peg$c183 = "rrx";
  var peg$c184 = "uxtb";
  var peg$c185 = "uxth";
  var peg$c186 = "uxtw";
  var peg$c187 = "sxtb";
  var peg$c188 = "sxth";
  var peg$c189 = "sxtx";
  var peg$c190 = "uxtx";
  var peg$c191 = "30";
  var peg$c192 = "w";
  var peg$c193 = "sp";
  var peg$c194 = "wsp";
  var peg$c195 = "xzr";
  var peg$c196 = "wzr";
  var peg$c197 = "lr";
  var peg$c198 = "fp";
  var peg$c199 = "pc";
  var peg$c200 = "s1";
  var peg$c201 = "2";
  var peg$c202 = "e";
  var peg$c203 = "spsr_el";
  var peg$c204 = "elr_el";
  var peg$c205 = "sp_el";
  var peg$c206 = "spsel";
  var peg$c207 = "currentel";
  var peg$c208 = "daif";
  var peg$c209 = "nzcv";
  var peg$c210 = "fpcr";
  var peg$c211 = "fpsr";
  var peg$c212 = "pmcr_el0";
  var peg$c213 = "pmcntenset_el0";
  var peg$c214 = "pmcntenclr_el0";
  var peg$c215 = "pmcnten_el0";
  var peg$c216 = "pmovsclr_el0";
  var peg$c217 = "pmswinc_el0";
  var peg$c218 = "pmselr_el0";
  var peg$c219 = "pmceid0_el0";
  var peg$c220 = "pmceid1_el0";
  var peg$c221 = "pmceid_el0";
  var peg$c222 = "pmccntr_el0";
  var peg$c223 = "pmxevtyper_el0";
  var peg$c224 = "pmxevcntr_el0";
  var peg$c225 = "pmuserenr_el0";
  var peg$c226 = "pmovsset_el0";
  var peg$c227 = "pmintenset_el0";
  var peg$c228 = "pmintenclr_el0";
  var peg$c229 = "pmevcntr";
  var peg$c230 = "_el0";
  var peg$c231 = "pmevtyper";
  var peg$c232 = "pmccfiltr_el0";
  var peg$c233 = "daifset";
  var peg$c234 = "daifclr";
  var peg$c235 = "eq";
  var peg$c236 = "ne";
  var peg$c237 = "cs";
  var peg$c238 = "hs";
  var peg$c239 = "cc";
  var peg$c240 = "lo";
  var peg$c241 = "mi";
  var peg$c242 = "pl";
  var peg$c243 = "vs";
  var peg$c244 = "vc";
  var peg$c245 = "hi";
  var peg$c246 = "ls";
  var peg$c247 = "ge";
  var peg$c248 = "lt";
  var peg$c249 = "gt";
  var peg$c250 = "le";
  var peg$c251 = "al";
  var peg$c252 = ".n";
  var peg$c253 = ".w";
  var peg$c254 = "=";
  var peg$c255 = ":";
  var peg$c256 = "\"";
  var peg$c257 = "'";
  var peg$c258 = "0";
  var peg$c259 = "0x";
  var peg$c260 = "0b";
  var peg$c261 = "//";
  var peg$c262 = ";";
  var peg$c263 = "/*";
  var peg$c264 = "*/";
  var peg$c265 = "\u2295";
  var peg$c266 = "\u223C";
  var peg$c267 = "|";
  var peg$c268 = "&";
  var peg$c269 = "+";
  var peg$c270 = "[";
  var peg$c271 = "]";
  var peg$c272 = "!";
  var peg$c273 = ",";

  var peg$r0 = /^[su]/i;
  var peg$r1 = /^[bh]/i;
  var peg$r2 = /^[12]/;
  var peg$r3 = /^[0-9]/;
  var peg$r4 = /^[0-3]/;
  var peg$r5 = /^[rw]/i;
  var peg$r6 = /^[1-3]/;
  var peg$r7 = /^[0-2]/;
  var peg$r8 = /^[30]/;
  var peg$r9 = /^[1-2]/;
  var peg$r10 = /^[a-zA-Z_]/;
  var peg$r11 = /^[a-zA-Z0-9_]/;
  var peg$r12 = /^[^"]/;
  var peg$r13 = /^[^']/;
  var peg$r14 = /^[0-7]/;
  var peg$r15 = /^[0-9a-fA-F]/;
  var peg$r16 = /^[01]/;
  var peg$r17 = /^[+\-]/;
  var peg$r18 = /^[^\n]/;
  var peg$r19 = /^[^*]/;
  var peg$r20 = /^[*]/;
  var peg$r21 = /^[^*\/]/;
  var peg$r22 = /^[ \t]/;

  var peg$e0 = peg$literalExpectation("\n", false);
  var peg$e1 = peg$literalExpectation("@", false);
  var peg$e2 = peg$literalExpectation(".", false);
  var peg$e3 = peg$literalExpectation("align", false);
  var peg$e4 = peg$literalExpectation("ascii", false);
  var peg$e5 = peg$literalExpectation("asciz", false);
  var peg$e6 = peg$literalExpectation("balign", false);
  var peg$e7 = peg$literalExpectation("bss", false);
  var peg$e8 = peg$literalExpectation("byte", false);
  var peg$e9 = peg$literalExpectation("comm", false);
  var peg$e10 = peg$literalExpectation("data", false);
  var peg$e11 = peg$literalExpectation("double", false);
  var peg$e12 = peg$literalExpectation("end", false);
  var peg$e13 = peg$literalExpectation("equ", false);
  var peg$e14 = peg$literalExpectation("extern", false);
  var peg$e15 = peg$literalExpectation("file", false);
  var peg$e16 = peg$literalExpectation("float", false);
  var peg$e17 = peg$literalExpectation("global", false);
  var peg$e18 = peg$literalExpectation("hword", false);
  var peg$e19 = peg$literalExpectation("incbin", false);
  var peg$e20 = peg$literalExpectation("include", false);
  var peg$e21 = peg$literalExpectation("int", false);
  var peg$e22 = peg$literalExpectation("long", false);
  var peg$e23 = peg$literalExpectation("p2align", false);
  var peg$e24 = peg$literalExpectation("quad", false);
  var peg$e25 = peg$literalExpectation("section", false);
  var peg$e26 = peg$literalExpectation("set", false);
  var peg$e27 = peg$literalExpectation("size", false);
  var peg$e28 = peg$literalExpectation("skip", false);
  var peg$e29 = peg$literalExpectation("space", false);
  var peg$e30 = peg$literalExpectation("string", false);
  var peg$e31 = peg$literalExpectation("text", false);
  var peg$e32 = peg$literalExpectation("type", false);
  var peg$e33 = peg$literalExpectation("word", false);
  var peg$e34 = peg$literalExpectation("zero", false);
  var peg$e35 = peg$literalExpectation("adc", true);
  var peg$e36 = peg$literalExpectation("s", true);
  var peg$e37 = peg$literalExpectation("add", true);
  var peg$e38 = peg$literalExpectation("adr", true);
  var peg$e39 = peg$literalExpectation("adrp", true);
  var peg$e40 = peg$literalExpectation("cmn", true);
  var peg$e41 = peg$literalExpectation("cmp", true);
  var peg$e42 = peg$literalExpectation("madd", true);
  var peg$e43 = peg$literalExpectation("mneg", true);
  var peg$e44 = peg$literalExpectation("msub", true);
  var peg$e45 = peg$literalExpectation("mul", true);
  var peg$e46 = peg$literalExpectation("neg", true);
  var peg$e47 = peg$literalExpectation("ngc", true);
  var peg$e48 = peg$literalExpectation("sbc", true);
  var peg$e49 = peg$literalExpectation("sdiv", true);
  var peg$e50 = peg$literalExpectation("smaddl", true);
  var peg$e51 = peg$literalExpectation("smnegl", true);
  var peg$e52 = peg$literalExpectation("smsubl", true);
  var peg$e53 = peg$literalExpectation("smulh", true);
  var peg$e54 = peg$literalExpectation("smull", true);
  var peg$e55 = peg$literalExpectation("sub", true);
  var peg$e56 = peg$literalExpectation("udiv", true);
  var peg$e57 = peg$literalExpectation("umaddl", true);
  var peg$e58 = peg$literalExpectation("umnegl", true);
  var peg$e59 = peg$literalExpectation("umsubl", true);
  var peg$e60 = peg$literalExpectation("umulh", true);
  var peg$e61 = peg$literalExpectation("umull", true);
  var peg$e62 = peg$literalExpectation("bfi", true);
  var peg$e63 = peg$literalExpectation("bfxil", true);
  var peg$e64 = peg$literalExpectation("cls", true);
  var peg$e65 = peg$literalExpectation("clz", true);
  var peg$e66 = peg$literalExpectation("extr", true);
  var peg$e67 = peg$literalExpectation("rbit", true);
  var peg$e68 = peg$literalExpectation("rev", true);
  var peg$e69 = peg$literalExpectation("rev16", true);
  var peg$e70 = peg$literalExpectation("rev32", true);
  var peg$e71 = peg$classExpectation(["s", "u"], false, true);
  var peg$e72 = peg$literalExpectation("bfiz", true);
  var peg$e73 = peg$literalExpectation("bfx", true);
  var peg$e74 = peg$literalExpectation("xt", true);
  var peg$e75 = peg$classExpectation(["b", "h"], false, true);
  var peg$e76 = peg$literalExpectation("sxtw", true);
  var peg$e77 = peg$literalExpectation("and", true);
  var peg$e78 = peg$literalExpectation("asr", true);
  var peg$e79 = peg$literalExpectation("bic", true);
  var peg$e80 = peg$literalExpectation("eon", true);
  var peg$e81 = peg$literalExpectation("eor", true);
  var peg$e82 = peg$literalExpectation("lsl", true);
  var peg$e83 = peg$literalExpectation("lsr", true);
  var peg$e84 = peg$literalExpectation("mov", true);
  var peg$e85 = peg$literalExpectation("movk", true);
  var peg$e86 = peg$literalExpectation("movn", true);
  var peg$e87 = peg$literalExpectation("movz", true);
  var peg$e88 = peg$literalExpectation("mvn", true);
  var peg$e89 = peg$literalExpectation("orn", true);
  var peg$e90 = peg$literalExpectation("orr", true);
  var peg$e91 = peg$literalExpectation("ror", true);
  var peg$e92 = peg$literalExpectation("tst", true);
  var peg$e93 = peg$literalExpectation("b", true);
  var peg$e94 = peg$literalExpectation("bcc", true);
  var peg$e95 = peg$literalExpectation("bl", true);
  var peg$e96 = peg$literalExpectation("blr", true);
  var peg$e97 = peg$literalExpectation("br", true);
  var peg$e98 = peg$literalExpectation("cbnz", true);
  var peg$e99 = peg$literalExpectation("cbz", true);
  var peg$e100 = peg$literalExpectation("ret", true);
  var peg$e101 = peg$literalExpectation("tbnz", true);
  var peg$e102 = peg$literalExpectation("tbz", true);
  var peg$e103 = peg$literalExpectation("ccmn", true);
  var peg$e104 = peg$literalExpectation("ccmp", true);
  var peg$e105 = peg$literalExpectation("cinc", true);
  var peg$e106 = peg$literalExpectation("cinv", true);
  var peg$e107 = peg$literalExpectation("cneg", true);
  var peg$e108 = peg$literalExpectation("csel", true);
  var peg$e109 = peg$literalExpectation("cset", true);
  var peg$e110 = peg$literalExpectation("csetm", true);
  var peg$e111 = peg$literalExpectation("csinc", true);
  var peg$e112 = peg$literalExpectation("csinv", true);
  var peg$e113 = peg$literalExpectation("csneg", true);
  var peg$e114 = peg$literalExpectation("ldp", true);
  var peg$e115 = peg$literalExpectation("ldpsw", true);
  var peg$e116 = peg$literalExpectation("ld", true);
  var peg$e117 = peg$literalExpectation("u", true);
  var peg$e118 = peg$literalExpectation("r", true);
  var peg$e119 = peg$literalExpectation("rs", true);
  var peg$e120 = peg$literalExpectation("rsw", true);
  var peg$e121 = peg$literalExpectation("prfm", true);
  var peg$e122 = peg$literalExpectation("stp", true);
  var peg$e123 = peg$literalExpectation("st", true);
  var peg$e124 = peg$literalExpectation("cas", true);
  var peg$e125 = peg$literalExpectation("a", true);
  var peg$e126 = peg$literalExpectation("l", true);
  var peg$e127 = peg$literalExpectation("casp", true);
  var peg$e128 = peg$literalExpectation("cas", false);
  var peg$e129 = peg$literalExpectation("p", true);
  var peg$e130 = peg$literalExpectation("ldao", true);
  var peg$e131 = peg$literalExpectation("stao", true);
  var peg$e132 = peg$literalExpectation("swp", true);
  var peg$e133 = peg$literalExpectation("clr", true);
  var peg$e134 = peg$literalExpectation("set", true);
  var peg$e135 = peg$literalExpectation("crc32", true);
  var peg$e136 = peg$literalExpectation("crc32w", true);
  var peg$e137 = peg$literalExpectation("crc32x", true);
  var peg$e138 = peg$literalExpectation("crc32c", true);
  var peg$e139 = peg$literalExpectation("crc32cw", true);
  var peg$e140 = peg$literalExpectation("crc32cx", true);
  var peg$e141 = peg$literalExpectation("xp", true);
  var peg$e142 = peg$literalExpectation("x", true);
  var peg$e143 = peg$literalExpectation("ldnp", true);
  var peg$e144 = peg$literalExpectation("ldtr", true);
  var peg$e145 = peg$literalExpectation("ldtrs", true);
  var peg$e146 = peg$literalExpectation("ldtrsw", true);
  var peg$e147 = peg$literalExpectation("stlr", true);
  var peg$e148 = peg$literalExpectation("xr", true);
  var peg$e149 = peg$literalExpectation("stnp", true);
  var peg$e150 = peg$literalExpectation("sttr", true);
  var peg$e151 = peg$literalExpectation("at", true);
  var peg$e152 = peg$literalExpectation("brk", true);
  var peg$e153 = peg$literalExpectation("clrex", true);
  var peg$e154 = peg$literalExpectation("dmb", true);
  var peg$e155 = peg$literalExpectation("dsb", true);
  var peg$e156 = peg$literalExpectation("eret", true);
  var peg$e157 = peg$literalExpectation("hvc", true);
  var peg$e158 = peg$literalExpectation("isb", true);
  var peg$e159 = peg$literalExpectation("mrs", true);
  var peg$e160 = peg$literalExpectation("msr", true);
  var peg$e161 = peg$literalExpectation("nop", true);
  var peg$e162 = peg$literalExpectation("sev", true);
  var peg$e163 = peg$literalExpectation("sevl", true);
  var peg$e164 = peg$literalExpectation("smc", true);
  var peg$e165 = peg$literalExpectation("svc", true);
  var peg$e166 = peg$literalExpectation("wfe", true);
  var peg$e167 = peg$literalExpectation("wfi", true);
  var peg$e168 = peg$literalExpectation("yield", true);
  var peg$e169 = peg$literalExpectation("#", true);
  var peg$e170 = peg$otherExpectation("Operacion de Desplazamiento");
  var peg$e171 = peg$otherExpectation("Operacion de Rotaci\xF3n");
  var peg$e172 = peg$otherExpectation("Operacion de Extensi\xF3n");
  var peg$e173 = peg$literalExpectation("pldl1keep", true);
  var peg$e174 = peg$literalExpectation("pld1strm", true);
  var peg$e175 = peg$literalExpectation("pld2keep", true);
  var peg$e176 = peg$literalExpectation("pld2strm", true);
  var peg$e177 = peg$literalExpectation("pldl3keep", true);
  var peg$e178 = peg$literalExpectation("pld3strm", true);
  var peg$e179 = peg$literalExpectation("pstl1keep", true);
  var peg$e180 = peg$literalExpectation("pst1strm", true);
  var peg$e181 = peg$literalExpectation("pstl2keep", true);
  var peg$e182 = peg$literalExpectation("pst2strm", true);
  var peg$e183 = peg$literalExpectation("pstl3keep", true);
  var peg$e184 = peg$literalExpectation("pst3strm", true);
  var peg$e185 = peg$literalExpectation("pli", true);
  var peg$e186 = peg$literalExpectation("osh", true);
  var peg$e187 = peg$literalExpectation("nsh", true);
  var peg$e188 = peg$literalExpectation("ish", true);
  var peg$e189 = peg$literalExpectation("sy", true);
  var peg$e190 = peg$literalExpectation("rrx", true);
  var peg$e191 = peg$literalExpectation("uxtb", true);
  var peg$e192 = peg$literalExpectation("uxth", true);
  var peg$e193 = peg$literalExpectation("uxtw", true);
  var peg$e194 = peg$literalExpectation("sxtb", true);
  var peg$e195 = peg$literalExpectation("sxth", true);
  var peg$e196 = peg$literalExpectation("sxtx", true);
  var peg$e197 = peg$literalExpectation("uxtx", true);
  var peg$e198 = peg$otherExpectation("Registro_64_Bits");
  var peg$e199 = peg$literalExpectation("30", false);
  var peg$e200 = peg$classExpectation(["1", "2"], false, false);
  var peg$e201 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e202 = peg$otherExpectation("Registro_32_Bits");
  var peg$e203 = peg$literalExpectation("w", true);
  var peg$e204 = peg$otherExpectation("Apuntador_Pila");
  var peg$e205 = peg$literalExpectation("sp", true);
  var peg$e206 = peg$literalExpectation("wsp", true);
  var peg$e207 = peg$otherExpectation("Zero_Register");
  var peg$e208 = peg$literalExpectation("xzr", true);
  var peg$e209 = peg$literalExpectation("wzr", true);
  var peg$e210 = peg$otherExpectation("Link_Register");
  var peg$e211 = peg$literalExpectation("lr", true);
  var peg$e212 = peg$otherExpectation("Frame_Pointer");
  var peg$e213 = peg$literalExpectation("fp", true);
  var peg$e214 = peg$otherExpectation("Program_Counter");
  var peg$e215 = peg$literalExpectation("pc", true);
  var peg$e216 = peg$literalExpectation("s1", true);
  var peg$e217 = peg$literalExpectation("2", true);
  var peg$e218 = peg$literalExpectation("e", true);
  var peg$e219 = peg$classExpectation([["0", "3"]], false, false);
  var peg$e220 = peg$classExpectation(["r", "w"], false, true);
  var peg$e221 = peg$otherExpectation("Saved_Program_Status_Register_For_Exception_Level");
  var peg$e222 = peg$literalExpectation("spsr_el", true);
  var peg$e223 = peg$classExpectation([["1", "3"]], false, false);
  var peg$e224 = peg$otherExpectation("Exception_Link_Register_For_Exception_Level");
  var peg$e225 = peg$literalExpectation("elr_el", true);
  var peg$e226 = peg$otherExpectation("Stack_Pointer_For_Exception_Level");
  var peg$e227 = peg$literalExpectation("sp_el", true);
  var peg$e228 = peg$classExpectation([["0", "2"]], false, false);
  var peg$e229 = peg$otherExpectation("SP_Selection");
  var peg$e230 = peg$literalExpectation("spsel", true);
  var peg$e231 = peg$otherExpectation("Current_Exception_Level");
  var peg$e232 = peg$literalExpectation("currentel", true);
  var peg$e233 = peg$otherExpectation("Interrupt_Mask_Bits");
  var peg$e234 = peg$literalExpectation("daif", true);
  var peg$e235 = peg$otherExpectation("Condition_Flag_Register");
  var peg$e236 = peg$literalExpectation("nzcv", true);
  var peg$e237 = peg$otherExpectation("Floating_Point_Control_Register");
  var peg$e238 = peg$literalExpectation("fpcr", true);
  var peg$e239 = peg$otherExpectation("Floating_Point_Status_Register");
  var peg$e240 = peg$literalExpectation("fpsr", true);
  var peg$e241 = peg$otherExpectation("Performance_Monitoring_Control");
  var peg$e242 = peg$literalExpectation("pmcr_el0", true);
  var peg$e243 = peg$otherExpectation("Performance_Monitoring_Count_Enable_Set");
  var peg$e244 = peg$literalExpectation("pmcntenset_el0", true);
  var peg$e245 = peg$otherExpectation("Performance_Monitoring_Count_Enable_Clear");
  var peg$e246 = peg$literalExpectation("pmcntenclr_el0", true);
  var peg$e247 = peg$otherExpectation("Performance_Monitoring_Count_Enable");
  var peg$e248 = peg$literalExpectation("pmcnten_el0", true);
  var peg$e249 = peg$otherExpectation("Performance_Monitoring_Overflow_Status_Clear");
  var peg$e250 = peg$literalExpectation("pmovsclr_el0", true);
  var peg$e251 = peg$otherExpectation("Performance_Monitoring_Software_Increment");
  var peg$e252 = peg$literalExpectation("pmswinc_el0", true);
  var peg$e253 = peg$otherExpectation("Performance_Monitoring_Select");
  var peg$e254 = peg$literalExpectation("pmselr_el0", true);
  var peg$e255 = peg$otherExpectation("Performance_Monitoring_Event_Identifier_0");
  var peg$e256 = peg$literalExpectation("pmceid0_el0", true);
  var peg$e257 = peg$otherExpectation("Performance_Monitoring_Event_Identifier_1");
  var peg$e258 = peg$literalExpectation("pmceid1_el0", true);
  var peg$e259 = peg$otherExpectation("Performance_Monitoring_Counter_Event_Type");
  var peg$e260 = peg$literalExpectation("pmceid_el0", true);
  var peg$e261 = peg$otherExpectation("Performance_Monitoring_Counter");
  var peg$e262 = peg$literalExpectation("pmccntr_el0", true);
  var peg$e263 = peg$otherExpectation("Performance_Monitoring_Event_Type");
  var peg$e264 = peg$literalExpectation("pmxevtyper_el0", true);
  var peg$e265 = peg$otherExpectation("Performance_Monitoring_Event_Count");
  var peg$e266 = peg$literalExpectation("pmxevcntr_el0", true);
  var peg$e267 = peg$otherExpectation("Performance_Monitoring_User_Enable");
  var peg$e268 = peg$literalExpectation("pmuserenr_el0", true);
  var peg$e269 = peg$otherExpectation("Performance_Monitoring_Overflow_Status_Set");
  var peg$e270 = peg$literalExpectation("pmovsset_el0", true);
  var peg$e271 = peg$otherExpectation("Performance_Monitoring_Interrupt_Enable_Set");
  var peg$e272 = peg$literalExpectation("pmintenset_el0", true);
  var peg$e273 = peg$otherExpectation("Performance_Monitoring_Interrupt_Enable_Clear");
  var peg$e274 = peg$literalExpectation("pmintenclr_el0", true);
  var peg$e275 = peg$literalExpectation("pmevcntr", true);
  var peg$e276 = peg$classExpectation(["3", "0"], false, false);
  var peg$e277 = peg$classExpectation([["1", "2"]], false, false);
  var peg$e278 = peg$literalExpectation("_el0", true);
  var peg$e279 = peg$literalExpectation("pmevtyper", true);
  var peg$e280 = peg$otherExpectation("Performance_Monitoring_Cycle_Counter_Filter");
  var peg$e281 = peg$literalExpectation("pmccfiltr_el0", true);
  var peg$e282 = peg$otherExpectation("Interrupt_Mask_Bits_Set");
  var peg$e283 = peg$literalExpectation("daifset", true);
  var peg$e284 = peg$otherExpectation("Interrupt_Mask_Bits_Clear");
  var peg$e285 = peg$literalExpectation("daifclr", true);
  var peg$e286 = peg$otherExpectation("Stack_Pointer_Selection");
  var peg$e287 = peg$otherExpectation("C\xF3digos_Condicionales");
  var peg$e288 = peg$literalExpectation("eq", true);
  var peg$e289 = peg$literalExpectation("ne", true);
  var peg$e290 = peg$literalExpectation("cs", true);
  var peg$e291 = peg$literalExpectation("hs", true);
  var peg$e292 = peg$literalExpectation("cc", true);
  var peg$e293 = peg$literalExpectation("lo", true);
  var peg$e294 = peg$literalExpectation("mi", true);
  var peg$e295 = peg$literalExpectation("pl", true);
  var peg$e296 = peg$literalExpectation("vs", true);
  var peg$e297 = peg$literalExpectation("vc", true);
  var peg$e298 = peg$literalExpectation("hi", true);
  var peg$e299 = peg$literalExpectation("ls", true);
  var peg$e300 = peg$literalExpectation("ge", true);
  var peg$e301 = peg$literalExpectation("lt", true);
  var peg$e302 = peg$literalExpectation("gt", true);
  var peg$e303 = peg$literalExpectation("le", true);
  var peg$e304 = peg$literalExpectation("al", true);
  var peg$e305 = peg$otherExpectation("Sufijo_Condici\xF3n");
  var peg$e306 = peg$literalExpectation(".N", true);
  var peg$e307 = peg$literalExpectation(".W", true);
  var peg$e308 = peg$otherExpectation("Inmediato Entero");
  var peg$e309 = peg$otherExpectation("Inmediato Hexadecimal");
  var peg$e310 = peg$otherExpectation("Inmediato Octal");
  var peg$e311 = peg$otherExpectation("Inmediato Binario");
  var peg$e312 = peg$otherExpectation("Inmediato Caracter");
  var peg$e313 = peg$otherExpectation("Inmediato Identificador");
  var peg$e314 = peg$otherExpectation("Constante");
  var peg$e315 = peg$literalExpectation("=", false);
  var peg$e316 = peg$otherExpectation("Value");
  var peg$e317 = peg$otherExpectation("Label");
  var peg$e318 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e319 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e320 = peg$literalExpectation(":", false);
  var peg$e321 = peg$otherExpectation("Identificador");
  var peg$e322 = peg$otherExpectation("String");
  var peg$e323 = peg$literalExpectation("\"", false);
  var peg$e324 = peg$classExpectation(["\""], true, false);
  var peg$e325 = peg$otherExpectation("Char");
  var peg$e326 = peg$literalExpectation("'", false);
  var peg$e327 = peg$classExpectation(["'"], true, false);
  var peg$e328 = peg$otherExpectation("Octal");
  var peg$e329 = peg$literalExpectation("0", false);
  var peg$e330 = peg$classExpectation([["0", "7"]], false, false);
  var peg$e331 = peg$otherExpectation("Hexadecimal");
  var peg$e332 = peg$literalExpectation("0x", false);
  var peg$e333 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e334 = peg$otherExpectation("Binario");
  var peg$e335 = peg$literalExpectation("0b", false);
  var peg$e336 = peg$classExpectation(["0", "1"], false, false);
  var peg$e337 = peg$otherExpectation("Entero");
  var peg$e338 = peg$classExpectation(["+", "-"], false, false);
  var peg$e339 = peg$otherExpectation("Linea En Blanco");
  var peg$e340 = peg$otherExpectation("Comentario");
  var peg$e341 = peg$otherExpectation("Comentario de L\xEDnea");
  var peg$e342 = peg$literalExpectation("//", false);
  var peg$e343 = peg$classExpectation(["\n"], true, false);
  var peg$e344 = peg$literalExpectation(";", false);
  var peg$e345 = peg$otherExpectation("Comentario Multil\xEDnea");
  var peg$e346 = peg$literalExpectation("/*", false);
  var peg$e347 = peg$classExpectation(["*"], true, false);
  var peg$e348 = peg$classExpectation(["*"], false, false);
  var peg$e349 = peg$classExpectation(["*", "/"], true, false);
  var peg$e350 = peg$literalExpectation("*/", false);
  var peg$e351 = peg$otherExpectation("Igual");
  var peg$e352 = peg$otherExpectation("Xor");
  var peg$e353 = peg$literalExpectation("\u2295", true);
  var peg$e354 = peg$otherExpectation("Negaci\xF3n");
  var peg$e355 = peg$literalExpectation("\u223C", true);
  var peg$e356 = peg$otherExpectation("O");
  var peg$e357 = peg$literalExpectation("|", true);
  var peg$e358 = peg$otherExpectation("Y");
  var peg$e359 = peg$literalExpectation("&", true);
  var peg$e360 = peg$otherExpectation("Mas");
  var peg$e361 = peg$literalExpectation("+", true);
  var peg$e362 = peg$otherExpectation("Llave Izq");
  var peg$e363 = peg$literalExpectation("[", true);
  var peg$e364 = peg$otherExpectation("Llave Der");
  var peg$e365 = peg$literalExpectation("]", true);
  var peg$e366 = peg$otherExpectation("Exclamaci\xF3n");
  var peg$e367 = peg$literalExpectation("!", true);
  var peg$e368 = peg$otherExpectation("Coma");
  var peg$e369 = peg$literalExpectation(",", false);
  var peg$e370 = peg$otherExpectation("Espacio en blanco");
  var peg$e371 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e372 = peg$otherExpectation("Fin de la Entrada");
  var peg$e373 = peg$anyExpectation();

  var peg$f0 = function(list) {root.children = [...list]; root.children = root.children = root.children.filter(node => node.type !== TYPE.BLANK);
    root.children = root.children.filter(node => node.type !== TYPE.COMMENT); return root;};
  var peg$f1 = function(d, de, exp) {const n = createNode(TYPE.DIRECT_SECTION, 'SECCION DE DIRECTIVAS', ''); n.addChild(d); if(de){n.addChild(de);} 
    exp.forEach(e => {if(e instanceof CSTnode &&  e.type !== TYPE.BLANK && e.type !== TYPE.COMMENT){n.addChild(e);}}); root.addChild(n); return n;};
  var peg$f2 = function(e) {const n = createNode(TYPE.DIRECT_EXP, 'EXPRESION DIRECTIVA', ''); n.addChild(e); return n;};
  var peg$f3 = function(i, c, int) {const n = createNode(TYPE.DIRECT_EXP, 'EXPRESION DIRECTIVA', ''); n.addChild(i); n.addChild(c); n.addChild(int); return n;};
  var peg$f4 = function(i, c, i2) {const n = createNode(TYPE.DIRECT_EXP, 'EXPRESION DIRECTIVA', ''); n.addChild(i); n.addChild(c); n.addChild(i2); return n;};
  var peg$f5 = function(i, c, string) {const n = createNode(TYPE.DIRECT_EXP, 'EXPRESION DIRECTIVA', ''); n.addChild(i); n.addChild(c); n.addChild(string); return n;};
  var peg$f6 = function(i) {const n = createNode(TYPE.DIRECT_EXP, 'EXPRESION DIRECTIVA', ''); n.addChild(i); return n;};
  var peg$f7 = function() {return createNode(TYPE.DIRECTIVE, text().replaceAll(/\s/g, ''), '');};
  var peg$f8 = function(i, e, v) {const n = createNode(TYPE.EXPRESSION, 'EXPRESSION', ''); n.addChild(i); n.addChild(e); n.addChild(v); return n;};
  var peg$f9 = function(l, d, v, vl) {const n = createNode(TYPE.EXPRESSION, 'EXPRESSION', ''); n.addChild(l); n.addChild(d); const a = createNode(TYPE.ARGS,'args',''); 
    a.addChild(v); if(vl){a.addChildren_Values(vl);} n.addChild(a); return n;};
  var peg$f10 = function() {return null;};
  var peg$f11 = function() {return null;};
  var peg$f12 = function(l, list) {const n = createNode(TYPE.INST_SECTION, 'SECCION DE INSTRUCCIONES', ''); n.addChildren_Values(l); const inst = createNode(TYPE.INSTRUCTIONS, 'INSTRUCCIONES', '');
    list.forEach(e => {if(e instanceof CSTnode &&  e.type !== TYPE.BLANK && e.type !== TYPE.COMMENT){inst.addChild(e);}}); n.addChild(inst); return n;};
  var peg$f13 = function(i) {return i;};
  var peg$f14 = function(i) {return i;};
  var peg$f15 = function(i) {return i;};
  var peg$f16 = function(i) {return i;};
  var peg$f17 = function(i) {return i;};
  var peg$f18 = function(i) {return i;};
  var peg$f19 = function(i) {return i;};
  var peg$f20 = function(i) {return i;};
  var peg$f21 = function(i) {return i;};
  var peg$f22 = function(i) {return i;};
  var peg$f23 = function(i) {return i;};
  var peg$f24 = function(i) {return i;};
  var peg$f25 = function(i) {return i;};
  var peg$f26 = function(i) {return i;};
  var peg$f27 = function(i) {return i;};
  var peg$f28 = function(i) {return i;};
  var peg$f29 = function(i) {return i;};
  var peg$f30 = function(i) {return i;};
  var peg$f31 = function(i) {return i;};
  var peg$f32 = function(i) {return i;};
  var peg$f33 = function(i) {return i;};
  var peg$f34 = function(i) {return i;};
  var peg$f35 = function(i) {return i;};
  var peg$f36 = function(i) {return i;};
  var peg$f37 = function(i) {return i;};
  var peg$f38 = function(i) {return i;};
  var peg$f39 = function(i) {return i;};
  var peg$f40 = function(i) {return i;};
  var peg$f41 = function(i) {return i;};
  var peg$f42 = function(i) {return i;};
  var peg$f43 = function(i) {return i;};
  var peg$f44 = function(i) {return i;};
  var peg$f45 = function(i) {return i;};
  var peg$f46 = function(i) {return i;};
  var peg$f47 = function(i) {return i;};
  var peg$f48 = function(i) {return i;};
  var peg$f49 = function(i) {return i;};
  var peg$f50 = function(i) {return i;};
  var peg$f51 = function(i) {return i;};
  var peg$f52 = function(i) {return i;};
  var peg$f53 = function(i) {return i;};
  var peg$f54 = function(i) {return i;};
  var peg$f55 = function(i) {return i;};
  var peg$f56 = function(i) {return i;};
  var peg$f57 = function(i) {return i;};
  var peg$f58 = function(i) {return i;};
  var peg$f59 = function(i) {return i;};
  var peg$f60 = function(i) {return i;};
  var peg$f61 = function(i) {return i;};
  var peg$f62 = function(i) {return i;};
  var peg$f63 = function(i) {return i;};
  var peg$f64 = function(i) {return i;};
  var peg$f65 = function(i) {return i;};
  var peg$f66 = function(i) {return i;};
  var peg$f67 = function(i) {return i;};
  var peg$f68 = function(i) {return i;};
  var peg$f69 = function(i) {return i;};
  var peg$f70 = function(i) {return i;};
  var peg$f71 = function(i) {return i;};
  var peg$f72 = function(i) {return i;};
  var peg$f73 = function(i) {return i;};
  var peg$f74 = function(i) {return i;};
  var peg$f75 = function(i) {return i;};
  var peg$f76 = function(i) {return i;};
  var peg$f77 = function(i) {return i;};
  var peg$f78 = function(i) {return i;};
  var peg$f79 = function(i) {return i;};
  var peg$f80 = function(i) {return i;};
  var peg$f81 = function(i) {return i;};
  var peg$f82 = function(i) {return i;};
  var peg$f83 = function(i) {return i;};
  var peg$f84 = function(i) {return i;};
  var peg$f85 = function(i) {return i;};
  var peg$f86 = function(i) {return i;};
  var peg$f87 = function(i) {return i;};
  var peg$f88 = function(i) {return i;};
  var peg$f89 = function(i) {return i;};
  var peg$f90 = function(i) {return i;};
  var peg$f91 = function(i) {return i;};
  var peg$f92 = function(i) {return i;};
  var peg$f93 = function(i) {return i;};
  var peg$f94 = function(i) {return i;};
  var peg$f95 = function(i) {return i;};
  var peg$f96 = function(i) {return i;};
  var peg$f97 = function(i) {return i;};
  var peg$f98 = function(i) {return i;};
  var peg$f99 = function(i) {return i;};
  var peg$f100 = function(i) {return i;};
  var peg$f101 = function(i) {return i;};
  var peg$f102 = function(i) {return i;};
  var peg$f103 = function(i) {return i;};
  var peg$f104 = function(i) {return i;};
  var peg$f105 = function(i) {return i;};
  var peg$f106 = function(i) {return i;};
  var peg$f107 = function(i) {return i;};
  var peg$f108 = function(i) {return i;};
  var peg$f109 = function(i) {return i;};
  var peg$f110 = function(i) {return i;};
  var peg$f111 = function(i) {return i;};
  var peg$f112 = function(i) {return i;};
  var peg$f113 = function(i) {return i;};
  var peg$f114 = function(i) {return i;};
  var peg$f115 = function(i) {return i;};
  var peg$f116 = function(i) {return i;};
  var peg$f117 = function(i) {return i;};
  var peg$f118 = function(i) {return i;};
  var peg$f119 = function(i) {return i;};
  var peg$f120 = function(i) {return i;};
  var peg$f121 = function(i) {return i;};
  var peg$f122 = function(i) {return i;};
  var peg$f123 = function(i) {return i;};
  var peg$f124 = function(i) {return i;};
  var peg$f125 = function(i) {return i;};
  var peg$f126 = function(i) {return i;};
  var peg$f127 = function(i) {return i;};
  var peg$f128 = function(i) {return i;};
  var peg$f129 = function(i) {return i;};
  var peg$f130 = function(i) {return i;};
  var peg$f131 = function(i) {return i;};
  var peg$f132 = function(i) {return i;};
  var peg$f133 = function(i) {return i;};
  var peg$f134 = function(i) {return i;};
  var peg$f135 = function(i) {return i;};
  var peg$f136 = function(i) {return i;};
  var peg$f137 = function(i) {return i;};
  var peg$f138 = function(i) {return i;};
  var peg$f139 = function(i) {return i;};
  var peg$f140 = function(i) {return i;};
  var peg$f141 = function(i) {return i;};
  var peg$f142 = function(i) {return i;};
  var peg$f143 = function(i) {return i;};
  var peg$f144 = function(i) {return i;};
  var peg$f145 = function(i) {return i;};
  var peg$f146 = function(i) {return i;};
  var peg$f147 = function(i) {return i;};
  var peg$f148 = function(i) {return i;};
  var peg$f149 = function(i) {return i;};
  var peg$f150 = function(i) {return i;};
  var peg$f151 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f152 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f153 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'adcs'){return createNode(TYPE.ADCS, op, '');} return createNode(TYPE.ADC, op, '');};
  var peg$f154 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f155 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f156 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'adds'){return createNode(TYPE.ADDS, op, '');} return createNode(TYPE.ADD, op, '');};
  var peg$f157 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f158 = function(op) {return createNode(TYPE.ADR, op, '');};
  var peg$f159 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f160 = function(op) {return createNode(TYPE.ADRP, op, '');};
  var peg$f161 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f162 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f163 = function(op) {return createNode(TYPE.CMN, op, '');};
  var peg$f164 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f165 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f166 = function(op) {return createNode(TYPE.CMP, op, '');};
  var peg$f167 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f168 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f169 = function(op) {return createNode(TYPE.MADD, op, '');};
  var peg$f170 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f171 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f172 = function(op) {return createNode(TYPE.MNEG, op, '');};
  var peg$f173 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f174 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f175 = function(op) {return createNode(TYPE.MSUB, op, '');};
  var peg$f176 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f177 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f178 = function(op) {return createNode(TYPE.MUL, op, '');};
  var peg$f179 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f180 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f181 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'negs'){return createNode(TYPE.NEGS, op, '');} return createNode(TYPE.NEG, 'neg', '');};
  var peg$f182 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f183 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f184 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'ngcs'){return createNode(TYPE.NGCS, op, '');} return createNode(TYPE.NGC, 'ngc', '');};
  var peg$f185 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f186 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f187 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'sbcs'){return createNode(TYPE.SBCS, op, '');} return createNode(TYPE.SBC, 'sbc', '');};
  var peg$f188 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f189 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f190 = function(op) {return createNode(TYPE.SDIV, op, '');};
  var peg$f191 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f192 = function(op) {return createNode(TYPE.SMADDL, op, '');};
  var peg$f193 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f194 = function(op) {return createNode(TYPE.SMNEGL, op, '');};
  var peg$f195 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f196 = function(op) {return createNode(TYPE.SMSUBL, op, '');};
  var peg$f197 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f198 = function(op) {return createNode(TYPE.SMULH, op, '');};
  var peg$f199 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f200 = function(op) {return createNode(TYPE.SMULL, op, '');};
  var peg$f201 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f202 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f203 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'subs'){return createNode(TYPE.SUBS, op, '');} return createNode(TYPE.SUB, 'sub', '');};
  var peg$f204 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f205 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f206 = function(op) {return createNode(TYPE.UDIV, op, '');};
  var peg$f207 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f208 = function(op) {return createNode(TYPE.UMADDL, op, '');};
  var peg$f209 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f210 = function(op) {return createNode(TYPE.UMNEGL, op, '');};
  var peg$f211 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f212 = function(op) {return createNode(TYPE.UMSUBL, op, '');};
  var peg$f213 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f214 = function(op) {return createNode(TYPE.UMULH, op, '');};
  var peg$f215 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ARITHMETIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f216 = function(op) {return createNode(TYPE.UMULL, op, '');};
  var peg$f217 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f218 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f219 = function(op) {return createNode(TYPE.BFI, op, '');};
  var peg$f220 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f221 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f222 = function(op) {return createNode(TYPE.BFXIL, op, '');};
  var peg$f223 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f224 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f225 = function(op) {return createNode(TYPE.CLS, op, '');};
  var peg$f226 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f227 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f228 = function(op) {return createNode(TYPE.CLZ, op, '');};
  var peg$f229 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f230 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f231 = function(op) {return createNode(TYPE.EXTR, op, '');};
  var peg$f232 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f233 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f234 = function(op) {return createNode(TYPE.RBIT, op, '');};
  var peg$f235 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f236 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f237 = function(op) {return createNode(TYPE.REV, op, '');};
  var peg$f238 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f239 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f240 = function(op) {return createNode(TYPE.REV16, op, '');};
  var peg$f241 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f242 = function(op) {return createNode(TYPE.REV32, op, '');};
  var peg$f243 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f244 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f245 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'sbfiz'){return createNode(TYPE.SBFIZ, op, '');} else{return createNode(TYPE.UBFIZ, op, '');}};
  var peg$f246 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f247 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f248 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'sbfx'){return createNode(TYPE.SBFX, op, '');} else{return createNode(TYPE.UBFX, op, '');}};
  var peg$f249 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f250 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'sxtb'){return createNode(TYPE.SXTB, op, '');} else if(op.toLowerCase() === 'uxtb'){return createNode(TYPE.UXTB, op, '');} 
    else if(op.toLowerCase() === 'sxth'){return createNode(TYPE.SXTH, op, '');} else{return createNode(TYPE.UXTH, op, '');}};
  var peg$f251 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BIT MANIPULATION INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f252 = function(op) {return createNode(TYPE.SXTW, op, '');};
  var peg$f253 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f254 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f255 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'and'){return createNode(TYPE.AND, op, '');} else{return createNode(TYPE.ANDS, op, '');}};
  var peg$f256 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f257 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f258 = function(op) {return createNode(TYPE.ASR, op, '');};
  var peg$f259 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f260 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f261 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'bic'){return createNode(TYPE.BIC, op, '');} else{return createNode(TYPE.BICS, op, '');}};
  var peg$f262 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f263 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f264 = function(op) {return createNode(TYPE.EON, op, '');};
  var peg$f265 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f266 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f267 = function(op) {return createNode(TYPE.EOR, op, '');};
  var peg$f268 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f269 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f270 = function(op) {return createNode(TYPE.LSL, op, '');};
  var peg$f271 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f272 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f273 = function(op) {return createNode(TYPE.LSR, op, '');};
  var peg$f274 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('MOV INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f275 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('MOV INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f276 = function(op) {return createNode(TYPE.MOV, op, '');};
  var peg$f277 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('MOV INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f278 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('MOV INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args);ins.addChild(arg); return ins;};
  var peg$f279 = function(op) {return createNode(TYPE.MOVK, op, '');};
  var peg$f280 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('MOV INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f281 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('MOV INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f282 = function(op) {return createNode(TYPE.MOVN, op, '');};
  var peg$f283 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('MOV INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f284 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('MOV INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f285 = function(op) {return createNode(TYPE.MOVZ, op, '');};
  var peg$f286 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f287 = function(op) {return createNode(TYPE.MVN, op, '');};
  var peg$f288 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f289 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f290 = function(op) {return createNode(TYPE.ORN, op, '');};
  var peg$f291 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f292 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f293 = function(op) {return createNode(TYPE.ORR, op, '');};
  var peg$f294 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f295 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f296 = function(op) {return createNode(TYPE.ROR, op, '');};
  var peg$f297 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f298 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOGIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f299 = function(op) {return createNode(TYPE.TST, op, '');};
  var peg$f300 = function(op, c, q, a) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChild(a); ins.addChild(arg); return ins;};
  var peg$f301 = function(op) {return createNode(TYPE.B, op, '');};
  var peg$f302 = function(op, c, q, a) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChild(a); ins.addChild(arg); return ins;};
  var peg$f303 = function(op) {return createNode(TYPE.BCC, op, '');};
  var peg$f304 = function(op, c, q, a) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChild(a); ins.addChild(arg); return ins;};
  var peg$f305 = function(op) {return createNode(TYPE.BL, op, '');};
  var peg$f306 = function(op, c, q, a) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChild(a); ins.addChild(arg); return ins;};
  var peg$f307 = function(op, c, q, a) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChild(a); ins.addChild(arg); return ins;};
  var peg$f308 = function(op) {return createNode(TYPE.BLR, op, '');};
  var peg$f309 = function(op, c, q, a) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChild(a); ins.addChild(arg); return ins;};
  var peg$f310 = function(op, c, q, a) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChild(a); ins.addChild(arg); return ins;};
  var peg$f311 = function(op) {return createNode(TYPE.BR, op, '');};
  var peg$f312 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f313 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f314 = function(op) {return createNode(TYPE.CBNZ, op, '');};
  var peg$f315 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f316 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f317 = function(op) {return createNode(TYPE.CBZ, op, '');};
  var peg$f318 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    if(args){const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg);} return ins;};
  var peg$f319 = function(op) {return createNode(TYPE.RET, op, '');};
  var peg$f320 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f321 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f322 = function(op) {return createNode(TYPE.TBNZ, op, '');};
  var peg$f323 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f324 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('BRANCH INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f325 = function(op) {return createNode(TYPE.TBZ, op, '');};
  var peg$f326 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f327 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f328 = function(op) {return createNode(TYPE.CCMN, op, '');};
  var peg$f329 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f330 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f331 = function(op) {return createNode(TYPE.CCMP, op, '');};
  var peg$f332 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f333 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f334 = function(op) {return createNode(TYPE.CINC, op, '');};
  var peg$f335 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f336 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f337 = function(op) {return createNode(TYPE.CINV, op, '');};
  var peg$f338 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f339 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f340 = function(op) {return createNode(TYPE.CNEG, op, '');};
  var peg$f341 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f342 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f343 = function(op) {return createNode(TYPE.CSEL, op, '');};
  var peg$f344 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f345 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f346 = function(op) {return createNode(TYPE.CSET, op, '');};
  var peg$f347 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f348 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f349 = function(op) {return createNode(TYPE.CSETM, op, '');};
  var peg$f350 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f351 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f352 = function(op) {return createNode(TYPE.CSINC, op, '');};
  var peg$f353 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f354 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f355 = function(op) {return createNode(TYPE.CSINV, op, '');};
  var peg$f356 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f357 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CONDITIONAL INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f358 = function(op) {return createNode(TYPE.CSNEG, op, '');};
  var peg$f359 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f360 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f361 = function(op) {return createNode(TYPE.LDP, op, '');};
  var peg$f362 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f363 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f364 = function(op) {return createNode(TYPE.LDPSW, op, '');};
  var peg$f365 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f366 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f367 = function() {const op = text().replaceAll(/\s/g, ''); if (op.toLowerCase() === 'ldur'){return createNode(TYPE.LDUR, op, '');} else if (op.toLowerCase() === 'ldr'){return createNode(TYPE.LDR, op, '');}};
  var peg$f368 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f369 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f370 = function() {const op = text().replaceAll(/\s/g, ''); if (op.toLowerCase() === 'ldurb'){return createNode(TYPE.LDURB, op, '');} else if (op.toLowerCase() === 'ldrh'){return createNode(TYPE.LDRH, op, '');} 
    else if (op.toLowerCase() === 'ldurh'){return createNode(TYPE.LDURH, op, '');} else if (op.toLowerCase() === 'ldrb'){return createNode(TYPE.LDRB, op, '');}};
  var peg$f371 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f372 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f373 = function() {const op = text().replaceAll(/\s/g, ''); if (op.toLowerCase() === 'ldursb'){return createNode(TYPE.LDURSB, op, '');} else if (op.toLowerCase() === 'ldrsh'){return createNode(TYPE.LDRSH, op, '');} 
    else if (op.toLowerCase() === 'ldursh'){return createNode(TYPE.LDURSH, op, '');} else if (op.toLowerCase() === 'ldrsb'){return createNode(TYPE.LDRSB, op, '');}};
  var peg$f374 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f375 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f376 = function() {const op = text().replaceAll(/\s/g, ''); if (op.toLowerCase() === 'ldursw'){return createNode(TYPE.LDURSW, op, '');} else if (op.toLowerCase() === 'ldrsw'){return createNode(TYPE.LDRSW, op, '');}};
  var peg$f377 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f378 = function(op) {return createNode(TYPE.PRFM, op, '');};
  var peg$f379 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f380 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f381 = function(op) {return createNode(TYPE.STP, op, '');};
  var peg$f382 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f383 = function() {const op = text().replaceAll(/\s/g, ''); if (op.toLowerCase() === 'stur'){return createNode(TYPE.STUR, op, '');} else if (op.toLowerCase() === 'str'){return createNode(TYPE.STR, op, '');}};
  var peg$f384 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f385 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LOAD STORE INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f386 = function() {const op = text().replaceAll(/\s/g, ''); if (op.toLowerCase() === 'sturb'){return createNode(TYPE.STURB, op, '');} else if (op.toLowerCase() === 'sturh'){return createNode(TYPE.STURH, op, '');} 
    else if (op.toLowerCase() === 'strb'){return createNode(TYPE.STRB, op, '');} else if (op.toLowerCase() === 'strh'){return createNode(TYPE.STRH, op, '');}};
  var peg$f387 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f388 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f389 = function() {return createNode(TYPE.CAS, text().replaceAll(/\s/g, ''), '');};
  var peg$f390 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f391 = function() {return createNode(TYPE.CASPBH, text().replaceAll(/\s/g, ''), '');};
  var peg$f392 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f393 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f394 = function() {return createNode(TYPE.CASP, text().replaceAll(/\s/g, ''), '');};
  var peg$f395 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f396 = function() {return createNode(TYPE.LDAOBH, text().replaceAll(/\s/g, ''), '');};
  var peg$f397 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f398 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f399 = function() {return createNode(TYPE.LDAO, text().replaceAll(/\s/g, ''), '');};
  var peg$f400 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f401 = function() {return createNode(TYPE.STAOBH, text().replaceAll(/\s/g, ''), '');};
  var peg$f402 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f403 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f404 = function() {return createNode(TYPE.STAO, text().replaceAll(/\s/g, ''), '');};
  var peg$f405 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f406 = function() {return createNode(TYPE.SWPBH, text().replaceAll(/\s/g, ''), '');};
  var peg$f407 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f408 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f409 = function() {return createNode(TYPE.SWP, text().replaceAll(/\s/g, ''), '');};
  var peg$f410 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC OPERATION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f411 = function(op) {return createNode(TYPE.AADD, op, '');};
  var peg$f412 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC OPERATION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f413 = function(op) {return createNode(TYPE.ACLR, op, '');};
  var peg$f414 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC OPERATION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f415 = function(op) {return createNode(TYPE.AEOR, op, '');};
  var peg$f416 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('ATOMIC OPERATION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f417 = function(op) {return createNode(TYPE.ASET, op, '');};
  var peg$f418 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CHECKSUM INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f419 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'crc32') {return createNode(TYPE.CRC32, op, '');} else if(op.toLowerCase() === 'crc32b')
    {return createNode(TYPE.CRC32B, op, '');} else {return createNode(TYPE.CRC32H, op, '');}};
  var peg$f420 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CHECKSUM INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f421 = function(op) {return createNode(TYPE.CRC32W, op, '');};
  var peg$f422 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CHECKSUM INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f423 = function(op) {return createNode(TYPE.CRC32X, op, '');};
  var peg$f424 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CHECKSUM INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f425 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'crc32c') {return createNode(TYPE.CRC32C, op, '');} else if(op.toLowerCase() === 'crc32cb') 
    {return createNode(TYPE.CRC32CB, op, '');} else {return createNode(TYPE.CRC32CH, op, '');}};
  var peg$f426 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CHECKSUM INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f427 = function(op) {return createNode(TYPE.CRC32CW, op, '');};
  var peg$f428 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('CHECKSUM INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f429 = function(op) {return createNode(TYPE.CRC32CX, op, '');};
  var peg$f430 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f431 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f432 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'ldaxp') {return createNode(TYPE.LDAXP, op, '');} else {return createNode(TYPE.LDXP, op, '');}};
  var peg$f433 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f434 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'ldr') {return createNode(TYPE.LDR, op, '');} else if(op.toLowerCase() === 'ldar') {return createNode(TYPE.LDAR, op, '');} 
    else if(op.toLowerCase() === 'ldaxr') {return createNode(TYPE.LDAXR, op, '');} else {return createNode(TYPE.LDAXR, op, '');}};
  var peg$f435 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f436 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'ldaxrb') {return createNode(TYPE.LDAXRB, op, '');} else if(op.toLowerCase() === 'ldaxrh') {return createNode(TYPE.LDAXRH, op, '');} 
    else if(op.toLowerCase() === 'ldrb') {return createNode(TYPE.LDRB, op, '');} else if(op.toLowerCase() === 'ldrh') {return createNode(TYPE.LDRH, op, '');} else {return createNode(TYPE.LDR, op, '');}};
  var peg$f437 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f438 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f439 = function(op) {return createNode(TYPE.LDNP, op, '');};
  var peg$f440 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f441 = function(op) {return createNode(TYPE.LDTR, op, '');};
  var peg$f442 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f443 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'ldtrb') {return createNode(TYPE.LDTRB, op, '');} else if (op.toLowerCase() === 'ldtrh') {return createNode(TYPE.LDTRH, op, '');} 
    else {return createNode(TYPE.LDTR, op, '');}};
  var peg$f444 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f445 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'ldtrsb') {return createNode(TYPE.LDTRSB, op, '');} else if (op.toLowerCase() === 'ldtrsh') {return createNode(TYPE.LDTRSH, op, '');} 
    else {return createNode(TYPE.LDTRS, op, '');}};
  var peg$f446 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f447 = function(op) {return createNode(TYPE.LDTRSW, op, '');};
  var peg$f448 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f449 = function(op) {return createNode(TYPE.STLR, op, '');};
  var peg$f450 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f451 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'stlrb') {return createNode(TYPE.STLRB, op, '');} else if (op.toLowerCase() === 'stlrh') {return createNode(TYPE.STLRH, op, '');} 
    else {return createNode(TYPE.STLR, op, '');}};
  var peg$f452 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f453 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f454 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'stlxp') {return createNode(TYPE.STLXP, op, '');} else {return createNode(TYPE.STXP, op, '');}};
  var peg$f455 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f456 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'stlxr') {return createNode(TYPE.STLXR, op, '');} else {return createNode(TYPE.STXR, op, '');}};
  var peg$f457 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f458 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'stlxrb') {return createNode(TYPE.STLXRB, op, '');} else if(op.toLowerCase() === 'stlxrh') {return createNode(TYPE.STLXRH, op, '');}
    else if(op.toLowerCase() === 'stxrb') {return createNode(TYPE.STXRB, op, '');} else {return createNode(TYPE.STXRH, op, '');}};
  var peg$f459 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f460 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f461 = function(op) {return createNode(TYPE.STNP, op, '');};
  var peg$f462 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f463 = function(op) {return createNode(TYPE.STTR, op, '');};
  var peg$f464 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('LS WITH ATT INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f465 = function() {const op = text().replaceAll(/\s/g, ''); if(op.toLowerCase() === 'sttrb') {return createNode(TYPE.STTRB, op, '');} else if (op.toLowerCase() === 'sttrh') {return createNode(TYPE.STTRH, op, '');} 
    else {return createNode(TYPE.STTR, op, '');}};
  var peg$f466 = function(op, c, q, args) {const n = createNode(TYPE.AT, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
    const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f467 = function(op) {return createNode(TYPE.AT, op, '');};
  var peg$f468 = function(op, c, q, arg) {const n = createNode(TYPE.BRK,'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
    const args = createNode(TYPE.ARGS, 'arg', ''); args.addChild(arg); ins.addChild(args); return ins;};
  var peg$f469 = function(op) {return createNode(TYPE.BRK, op, '');};
  var peg$f470 = function(op, c, q, arg) {const n = createNode(TYPE.CLREX, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
    if(arg){const args = createNode(TYPE.ARGS, 'arg', ''); args.addChild(arg); ins.addChild(args);} return ins;};
  var peg$f471 = function(op) {return createNode(TYPE.CLREX, op, '');};
  var peg$f472 = function(op, c, q, arg) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
    const args = createNode(TYPE.ARGS, 'arg', ''); args.addChild(arg); ins.addChild(args); return ins;};
  var peg$f473 = function(op) {return createNode(TYPE.DMB, op, '');};
  var peg$f474 = function(op, c, q, arg) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
    const args = createNode(TYPE.ARGS, 'arg', ''); args.addChild(arg); ins.addChild(args); return ins;};
  var peg$f475 = function(op) {return createNode(TYPE.DSB, op, '');};
  var peg$f476 = function(op, c, q) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n); return ins;};
  var peg$f477 = function(op) {return createNode(TYPE.ERET, op, '');};
  var peg$f478 = function(op, c, q, arg) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
     const args = createNode(TYPE.ARGS, 'arg', ''); args.addChild(arg); ins.addChild(args); return ins;};
  var peg$f479 = function(op) {return createNode(TYPE.HVC, op, '');};
  var peg$f480 = function(op, c, q, arg) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
    if(arg){const args = createNode(TYPE.ARGS, 'arg', '');  args.addChild(arg); ins.addChild(args);}  return ins;};
  var peg$f481 = function(op) {return createNode(TYPE.ISB, op, '');};
  var peg$f482 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
     const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f483 = function(op) {return createNode(TYPE.MRS, op, '');};
  var peg$f484 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
     const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f485 = function(op, c, q, args) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
     const arg = createNode(TYPE.ARGS, 'args', ''); arg.addChildren_Values(args); ins.addChild(arg); return ins;};
  var peg$f486 = function(op) {return createNode(TYPE.MSR, op, '');};
  var peg$f487 = function(op, c, q) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n); return ins;};
  var peg$f488 = function(op) {return createNode(TYPE.NOP, op, '');};
  var peg$f489 = function(op, c, q) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n); return ins;};
  var peg$f490 = function(op) {return createNode(TYPE.SEV, op, '');};
  var peg$f491 = function(op, c, q) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n); return ins;};
  var peg$f492 = function(op) {return createNode(TYPE.SEVL, op, '');};
  var peg$f493 = function(op, c, q, arg) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
     const args = createNode(TYPE.ARGS, 'arg', ''); args.addChild(arg); ins.addChild(args); return ins;};
  var peg$f494 = function(op) {return createNode(TYPE.SMC, op, '');};
  var peg$f495 = function(op, c, q, arg) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n);
     const args = createNode(TYPE.ARGS, 'arg', ''); args.addChild(arg); ins.addChild(args); return ins;};
  var peg$f496 = function(op) {return createNode(TYPE.SVC, op, '');};
  var peg$f497 = function(op, c, q) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n); return ins;};
  var peg$f498 = function(op) {return createNode(TYPE.WFE, op, '');};
  var peg$f499 = function(op, c, q) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n); return ins;};
  var peg$f500 = function(op) {return createNode(TYPE.WFI, op, '');};
  var peg$f501 = function(op, c, q) {const n = createNode(TYPE.OP, 'op', ''); n.addChild(op); if(c){n.addChild(c);} if(q){n.addChild(q)} const ins = createInstNode('SYS INSTRUCTION'); ins.addChild(n); return ins;};
  var peg$f502 = function(op) {return createNode(TYPE.YIELD, op, '');};
  var peg$f503 = function(op, h, i) {const n = createNode(TYPE.SH, 'sh', ''); n.addChild(op); if(h){const nh = createNode(TYPE.NUMERAL, h, ''); n.addChild(nh);} n.addChild(i); return n;};
  var peg$f504 = function(op) {const n = createNode(TYPE.OP2A, 'op2', ''); n.addChild(op); return n;};
  var peg$f505 = function(op) {const n = createNode(TYPE.OP2A, 'op2', ''); n.addChild(op); return n;};
  var peg$f506 = function(op) {const n = createNode(TYPE.OP2A, 'op2', ''); n.addChild(op); return n;};
  var peg$f507 = function(op) {const n = createNode(TYPE.OP2L, 'op2', ''); n.addChild(op); return n;};
  var peg$f508 = function(op) {const n = createNode(TYPE.OP2L, 'op2', ''); n.addChild(op); return n;};
  var peg$f509 = function(i) {const n = createNode(TYPE.MASK, 'mask', ''); n.addChild(i); return n;};
  var peg$f510 = function(list) {const n = createNode(TYPE.ADDR, 'addri', ''); n.addChildren_Values(list); return n;};
  var peg$f511 = function(list) {const n = createNode(TYPE.ADDR, 'addre', ''); n.addChildren_Values(list); return n;};
  var peg$f512 = function(list) {const n = createNode(TYPE.ADDR, 'addrn', ''); n.addChildren_Values(list); return n;};
  var peg$f513 = function(rl) {const n = createNode(TYPE.ADDR, 'addr', ''); n.addChild(rl); return n;};
  var peg$f514 = function(r, op, i) {const n = createNode(TYPE.OPSHIFT, 'Shift', ''); n.addChild(r); n.addChild(op); n.addChild(i); return n;};
  var peg$f515 = function(r, op, i) {const n = createNode(TYPE.OPSHIFT, 'Shift', ''); n.addChild(r); n.addChild(op); n.addChild(i); return n;};
  var peg$f516 = function(r, op, i) {const n = createNode(TYPE.OPEXTEND, 'Extend', ''); n.addChild(r); n.addChild(op); n.addChild(i); return n;};
  var peg$f517 = function(r, op, i) {const n = createNode(TYPE.OPEXTEND, 'Extend', ''); n.addChild(r); n.addChild(op); n.addChild(i); return n;};
  var peg$f518 = function(rl) {const n = createNode(TYPE.REL, 'rel', ''); n.addChild(rl); return n;};
  var peg$f519 = function(rl) {const n = createNode(TYPE.REL, 'rel', ''); n.addChild(rl); return n;};
  var peg$f520 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f521 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f522 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f523 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f524 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f525 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f526 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f527 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f528 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f529 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f530 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f531 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f532 = function() {return createNode(TYPE.PRFOP,text().replaceAll(/\s/g, ''), '');};
  var peg$f533 = function() {return createNode(TYPE.BARRIEROP, text().replaceAll(/\s/g, ''), '');};
  var peg$f534 = function() {return createNode(TYPE.BARRIEROP, text().replaceAll(/\s/g, ''), '');};
  var peg$f535 = function() {return createNode(TYPE.BARRIEROP, text().replaceAll(/\s/g, ''), '');};
  var peg$f536 = function() {return createNode(TYPE.BARRIEROP, text().replaceAll(/\s/g, ''), '');};
  var peg$f537 = function() {return createNode(TYPE.BARRIEROP, text().replaceAll(/\s/g, ''), '');};
  var peg$f538 = function() {return createNode(TYPE.BARRIEROP, text().replaceAll(/\s/g, ''), '');};
  var peg$f539 = function() {return createNode(TYPE.SHIFT, text().replaceAll(/\s/g, ''), '');};
  var peg$f540 = function() {return createNode(TYPE.SHIFT, text().replaceAll(/\s/g, ''), '');};
  var peg$f541 = function() {return createNode(TYPE.SHIFT, text().replaceAll(/\s/g, ''), '');};
  var peg$f542 = function() {return createNode(TYPE.SHIFT, text().replaceAll(/\s/g, ''), '');};
  var peg$f543 = function() {return createNode(TYPE.SHIFT, text().replaceAll(/\s/g, ''), '');};
  var peg$f544 = function() {return createNode(TYPE.EXTEND, text().replaceAll(/\s/g, ''), '');};
  var peg$f545 = function() {return createNode(TYPE.EXTEND, text().replaceAll(/\s/g, ''), '');};
  var peg$f546 = function() {return createNode(TYPE.EXTEND, text().replaceAll(/\s/g, ''), '');};
  var peg$f547 = function() {return createNode(TYPE.EXTEND, text().replaceAll(/\s/g, ''), '');};
  var peg$f548 = function() {return createNode(TYPE.EXTEND, text().replaceAll(/\s/g, ''), '');};
  var peg$f549 = function() {return createNode(TYPE.EXTEND, text().replaceAll(/\s/g, ''), '');};
  var peg$f550 = function() {return createNode(TYPE.EXTEND, text().replaceAll(/\s/g, ''), '');};
  var peg$f551 = function() {return createNode(TYPE.EXTEND, text().replaceAll(/\s/g, ''), '');};
  var peg$f552 = function(r) {return r;};
  var peg$f553 = function(r) {return r;};
  var peg$f554 = function(r) {return r;};
  var peg$f555 = function(r) {return r;};
  var peg$f556 = function(r) {return r;};
  var peg$f557 = function(r) {return r;};
  var peg$f558 = function(r) {return r;};
  var peg$f559 = function(r) {return r;};
  var peg$f560 = function(r) {return r;};
  var peg$f561 = function(r) {return r;};
  var peg$f562 = function(r) {return r;};
  var peg$f563 = function(r) {return r;};
  var peg$f564 = function(r) {return r;};
  var peg$f565 = function(r) {return r;};
  var peg$f566 = function(r) {return r;};
  var peg$f567 = function(r) {return r;};
  var peg$f568 = function(r) {return r;};
  var peg$f569 = function(r) {return r;};
  var peg$f570 = function() {return createNode(TYPE.R64, text().replaceAll(/\s/g, ''), '');};
  var peg$f571 = function() {return createNode(TYPE.R32, text().replaceAll(/\s/g, ''), '');};
  var peg$f572 = function() {return createNode(TYPE.SP64, text().replaceAll(/\s/g, ''), '');};
  var peg$f573 = function() {return createNode(TYPE.SP32, text().replaceAll(/\s/g, ''), '');};
  var peg$f574 = function() {return createNode(TYPE.ZR64, text().replaceAll(/\s/g, ''), '');};
  var peg$f575 = function() {return createNode(TYPE.ZR32, text().replaceAll(/\s/g, ''), '');};
  var peg$f576 = function() {return createNode(TYPE.LR, text().replaceAll(/\s/g, ''), '');};
  var peg$f577 = function() {return createNode(TYPE.FP, text().replaceAll(/\s/g, ''), '');};
  var peg$f578 = function() {return createNode(TYPE.PC, text().replaceAll(/\s/g, ''), '');};
  var peg$f579 = function(r) {return r;};
  var peg$f580 = function(r) {return r;};
  var peg$f581 = function(r) {return r;};
  var peg$f582 = function(r) {return r;};
  var peg$f583 = function(r) {return r;};
  var peg$f584 = function(r) {return r;};
  var peg$f585 = function(r) {return r;};
  var peg$f586 = function(r) {return r;};
  var peg$f587 = function(r) {return r;};
  var peg$f588 = function(r) {return r;};
  var peg$f589 = function(r) {return r;};
  var peg$f590 = function(r) {return r;};
  var peg$f591 = function(r) {return r;};
  var peg$f592 = function(r) {return r;};
  var peg$f593 = function(r) {return r;};
  var peg$f594 = function(r) {return r;};
  var peg$f595 = function(r) {return r;};
  var peg$f596 = function(r) {return r;};
  var peg$f597 = function(r) {return r;};
  var peg$f598 = function(r) {return r;};
  var peg$f599 = function(r) {return r;};
  var peg$f600 = function(r) {return r;};
  var peg$f601 = function(r) {return r;};
  var peg$f602 = function(r) {return r;};
  var peg$f603 = function(r) {return r;};
  var peg$f604 = function(r) {return r;};
  var peg$f605 = function(r) {return r;};
  var peg$f606 = function(r) {return r;};
  var peg$f607 = function(r) {return r;};
  var peg$f608 = function(r) {return r;};
  var peg$f609 = function(r) {return r;};
  var peg$f610 = function(r) {return r;};
  var peg$f611 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f612 = function() {return createNode(TYPE.SY, text().replaceAll(/\s/g, ''), ''); return n;};
  var peg$f613 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f614 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f615 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f616 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f617 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f618 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f619 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f620 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f621 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f622 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f623 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f624 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f625 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f626 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f627 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f628 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f629 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f630 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f631 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f632 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f633 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f634 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f635 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f636 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f637 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f638 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f639 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f640 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f641 = function() {return createNode(TYPE.SYSREG, text(), '');};
  var peg$f642 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f643 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f644 = function() {return createNode(TYPE.SYSREG, text().replaceAll(/\s/g, ''), '');};
  var peg$f645 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f646 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f647 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f648 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f649 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f650 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f651 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f652 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f653 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f654 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f655 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f656 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f657 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f658 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f659 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f660 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f661 = function() {return createNode(TYPE.CC, text(), '');};
  var peg$f662 = function() {return createNode(TYPE.Q, text(), '');};
  var peg$f663 = function() {return createNode(TYPE.Q, text(), '');};
  var peg$f664 = function(i) {return i;};
  var peg$f665 = function(i) {return i;};
  var peg$f666 = function(i) {return i;};
  var peg$f667 = function(i) {return i;};
  var peg$f668 = function(i) {return i;};
  var peg$f669 = function(i) {return i;};
  var peg$f670 = function(h, v) {const n = createNode(TYPE.IMM, '#imm', ''); if(h){const nh = createNode(TYPE.NUMERAL, h, ''); n.addChild(nh);} n.addChild(v); return n;};
  var peg$f671 = function(h, v) {const n = createNode(TYPE.IMM, '#imm', ''); if(h){const nh = createNode(TYPE.NUMERAL, h, ''); n.addChild(nh);} n.addChild(v); return n;};
  var peg$f672 = function(h, v) {const n = createNode(TYPE.IMM, '#imm', ''); if(h){const nh = createNode(TYPE.NUMERAL, h, ''); n.addChild(nh);} n.addChild(v); return n;};
  var peg$f673 = function(h, v) {const n = createNode(TYPE.IMM, '#imm', ''); if(h){const nh = createNode(TYPE.NUMERAL, h, ''); n.addChild(nh);} n.addChild(v); return n;};
  var peg$f674 = function(h, v) {const n = createNode(TYPE.IMM, '#imm', ''); if(h){const nh = createNode(TYPE.NUMERAL, h, ''); n.addChild(nh);} n.addChild(v); return n;};
  var peg$f675 = function(h, v) {const n = createNode(TYPE.IMM, '#imm', ''); if(h){const nh = createNode(TYPE.NUMERAL, h, ''); n.addChild(nh);} n.addChild(v); return n;};
  var peg$f676 = function(e, i) {const n = createNode(TYPE.CONSTANT, '=', ''); if(e){const eq = createNode(TYPE.EQUAL, e, ''); n.addChild(eq);}  n.addChild(i); return n;};
  var peg$f677 = function(v) {return v;};
  var peg$f678 = function(v) {return v;};
  var peg$f679 = function(v) {return v;};
  var peg$f680 = function(v) {return v;};
  var peg$f681 = function(v) {return v;};
  var peg$f682 = function(v) {return v;};
  var peg$f683 = function(v) {return v;};
  var peg$f684 = function() {return createNode(TYPE.LABEL, text().replaceAll(/\s/g, ''), '');};
  var peg$f685 = function() {return createNode(TYPE.IDENTIFIER, text(), '');};
  var peg$f686 = function() {let v = new Value(TYPE.STRING, '', text().slice(1,-1)); v.convertToType(); return createNode(TYPE.STRING, v, '');};
  var peg$f687 = function() {let v = new Value(TYPE.CHAR, '', text().slice(1,-1)); v.convertToType(); return createNode(TYPE.CHAR, v, '');};
  var peg$f688 = function() {let v = new Value(TYPE.OCT, '', text().replaceAll(/\s/g, '')); v.convertToType(); return createNode(TYPE.OCT, v, '');};
  var peg$f689 = function() {let v = new Value(TYPE.HEX, '', text().replaceAll(/\s/g, '')); v.convertToType(); return createNode(TYPE.HEX, v, '');};
  var peg$f690 = function() {let v = new Value(TYPE.BIN, '', text().replaceAll(/\s/g, '')); v.convertToType(); return createNode(TYPE.BIN, v, '');};
  var peg$f691 = function() {let v = new Value(TYPE.INT, '', text().replaceAll(/\s/g, '')); v.convertToType(); return createNode(TYPE.INT, v, '');};
  var peg$f692 = function() {return createNode(TYPE.BLANK, text(), '');};
  var peg$f693 = function(c) {return c;};
  var peg$f694 = function(c) {return c;};
  var peg$f695 = function() {return createNode(TYPE.COMMENT, text(), '');};
  var peg$f696 = function() {return createNode(TYPE.COMMENT, text(), '');};
  var peg$f697 = function() {return createNode(TYPE.COMMENT, text(), '');};
  var peg$f698 = function() {return createNode(TYPE.EQUAL, text(), '');};
  var peg$f699 = function(s) {return createNode(TYPE.XOR, s, '');};
  var peg$f700 = function(s) {return createNode(TYPE.NEG, s, '');};
  var peg$f701 = function(s) {return createNode(TYPE.O, s, '');};
  var peg$f702 = function(s) {return createNode(TYPE.Y, s, '');};
  var peg$f703 = function(s) {return createNode(TYPE.PLUS, s, '');};
  var peg$f704 = function(s) {return createNode(TYPE.LB, s, '');};
  var peg$f705 = function(s) {return createNode(TYPE.RB, s, '');};
  var peg$f706 = function(s) {return createNode(TYPE.EXCLAMATION, s, '');};
  var peg$f707 = function(s) {return createNode(TYPE.COMMA, s, '');};
  var peg$f708 = function() {return null;};
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsedirective_section();
    if (s2 === peg$FAILED) {
      s2 = peg$parsecode_section();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecomment();
        if (s2 === peg$FAILED) {
          s2 = peg$parseblank_line();
        }
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsedirective_section();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecode_section();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecomment();
          if (s2 === peg$FAILED) {
            s2 = peg$parseblank_line();
          }
        }
      }
    }
    s2 = peg$parseEOI();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f0(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirective_section() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsedirective();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      s3 = peg$parsedirective_exp();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      s5 = peg$parse_();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parse_();
      }
      s5 = peg$parsecomment();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s6 = peg$c0;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s6 !== peg$FAILED) {
        s7 = [];
        s8 = peg$parseexpression();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$parseexpression();
        }
        peg$savedPos = s0;
        s0 = peg$f1(s1, s3, s7);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirective_exp() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsedirective();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f2(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          s4 = peg$parseint();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f3(s1, s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsecomma();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 64) {
              s4 = peg$c1;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifier();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f4(s1, s2, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseidentifier();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
              s4 = peg$parsestring();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f5(s1, s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseidentifier();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f6(s1);
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedirective() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c2;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsedirective_name();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f7();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirective_name() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c3) {
      s0 = peg$c3;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c4) {
        s0 = peg$c4;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c5) {
          s0 = peg$c5;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c6) {
            s0 = peg$c6;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c7) {
              s0 = peg$c7;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c8) {
                s0 = peg$c8;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c9) {
                  s0 = peg$c9;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e9); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c10) {
                    s0 = peg$c10;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e10); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c11) {
                      s0 = peg$c11;
                      peg$currPos += 6;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e11); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c12) {
                        s0 = peg$c12;
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e12); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c13) {
                          s0 = peg$c13;
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e13); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c14) {
                            s0 = peg$c14;
                            peg$currPos += 6;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e14); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c15) {
                              s0 = peg$c15;
                              peg$currPos += 4;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e15); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c16) {
                                s0 = peg$c16;
                                peg$currPos += 5;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e16); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c17) {
                                  s0 = peg$c17;
                                  peg$currPos += 6;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e17); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c18) {
                                    s0 = peg$c18;
                                    peg$currPos += 5;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e18); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c19) {
                                      s0 = peg$c19;
                                      peg$currPos += 6;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e19); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 7) === peg$c20) {
                                        s0 = peg$c20;
                                        peg$currPos += 7;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e20); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c21) {
                                          s0 = peg$c21;
                                          peg$currPos += 3;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e21); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c22) {
                                            s0 = peg$c22;
                                            peg$currPos += 4;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e22); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 7) === peg$c23) {
                                              s0 = peg$c23;
                                              peg$currPos += 7;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e23); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 4) === peg$c24) {
                                                s0 = peg$c24;
                                                peg$currPos += 4;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e24); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 7) === peg$c25) {
                                                  s0 = peg$c25;
                                                  peg$currPos += 7;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e25); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 3) === peg$c26) {
                                                    s0 = peg$c26;
                                                    peg$currPos += 3;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e26); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c27) {
                                                      s0 = peg$c27;
                                                      peg$currPos += 4;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e27); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c28) {
                                                        s0 = peg$c28;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e28); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c29) {
                                                          s0 = peg$c29;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e29); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 6) === peg$c30) {
                                                            s0 = peg$c30;
                                                            peg$currPos += 6;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e30); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 4) === peg$c31) {
                                                              s0 = peg$c31;
                                                              peg$currPos += 4;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e31); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 4) === peg$c32) {
                                                                s0 = peg$c32;
                                                                peg$currPos += 4;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e32); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 4) === peg$c33) {
                                                                  s0 = peg$c33;
                                                                  peg$currPos += 4;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e33); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 4) === peg$c34) {
                                                                    s0 = peg$c34;
                                                                    peg$currPos += 4;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e34); }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequal();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevalue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f8(s1, s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parselabel();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s3 = peg$c0;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parsedirective();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          s6 = peg$parsevalue();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$currPos;
            s9 = peg$parsecomma();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsevalue();
              if (s10 !== peg$FAILED) {
                s9 = [s9, s10];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$currPos;
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsevalue();
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            }
            s8 = [];
            s9 = peg$parse_();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parse_();
            }
            s9 = peg$parsecomment();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s10 = peg$c0;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f9(s1, s4, s6, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseblank_line();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f10();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecomment();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f11();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsecode_section() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parselabel();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parse_();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parse_();
      }
      s5 = peg$parsecomment();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s6 = peg$c0;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s6 !== peg$FAILED) {
        s3 = [s3, s4, s5, s6];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parselabel();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          s5 = peg$parsecomment();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (input.charCodeAt(peg$currPos) === 10) {
            s6 = peg$c0;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s6 !== peg$FAILED) {
            s3 = [s3, s4, s5, s6];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseinstruction();
      if (s3 === peg$FAILED) {
        s3 = peg$parseblank_line();
        if (s3 === peg$FAILED) {
          s3 = peg$parsecomment();
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseinstruction();
          if (s3 === peg$FAILED) {
            s3 = peg$parseblank_line();
            if (s3 === peg$FAILED) {
              s3 = peg$parsecomment();
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f12(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstruction() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseaadd_inst();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      s3 = peg$parsecomment();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f13(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseaclr_inst();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        s3 = peg$parsecomment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s4 = peg$c0;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f14(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseadc_inst();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$parsecomment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (input.charCodeAt(peg$currPos) === 10) {
            s4 = peg$c0;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f15(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseadd_inst();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            s3 = peg$parsecomment();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s4 = peg$c0;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f16(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseadr_inst();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = peg$parsecomment();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s4 = peg$c0;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f17(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseadrp_inst();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse_();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parse_();
                }
                s3 = peg$parsecomment();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s4 = peg$c0;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f18(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseaeor_inst();
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parse_();
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parse_();
                  }
                  s3 = peg$parsecomment();
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s4 = peg$c0;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f19(s1);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseand_inst();
                  if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parse_();
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parse_();
                    }
                    s3 = peg$parsecomment();
                    if (s3 === peg$FAILED) {
                      s3 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s4 = peg$c0;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f20(s1);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseasr_inst();
                    if (s1 !== peg$FAILED) {
                      s2 = [];
                      s3 = peg$parse_();
                      while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parse_();
                      }
                      s3 = peg$parsecomment();
                      if (s3 === peg$FAILED) {
                        s3 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s4 = peg$c0;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f21(s1);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseat_inst();
                      if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$parse_();
                        while (s3 !== peg$FAILED) {
                          s2.push(s3);
                          s3 = peg$parse_();
                        }
                        s3 = peg$parsecomment();
                        if (s3 === peg$FAILED) {
                          s3 = null;
                        }
                        if (input.charCodeAt(peg$currPos) === 10) {
                          s4 = peg$c0;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                        }
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f22(s1);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsebcc_inst();
                        if (s1 !== peg$FAILED) {
                          s2 = [];
                          s3 = peg$parse_();
                          while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$parse_();
                          }
                          s3 = peg$parsecomment();
                          if (s3 === peg$FAILED) {
                            s3 = null;
                          }
                          if (input.charCodeAt(peg$currPos) === 10) {
                            s4 = peg$c0;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                          }
                          if (s4 === peg$FAILED) {
                            s4 = null;
                          }
                          peg$savedPos = s0;
                          s0 = peg$f23(s1);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsebfi_inst();
                          if (s1 !== peg$FAILED) {
                            s2 = [];
                            s3 = peg$parse_();
                            while (s3 !== peg$FAILED) {
                              s2.push(s3);
                              s3 = peg$parse_();
                            }
                            s3 = peg$parsecomment();
                            if (s3 === peg$FAILED) {
                              s3 = null;
                            }
                            if (input.charCodeAt(peg$currPos) === 10) {
                              s4 = peg$c0;
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                            }
                            if (s4 === peg$FAILED) {
                              s4 = null;
                            }
                            peg$savedPos = s0;
                            s0 = peg$f24(s1);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsebfxil_inst();
                            if (s1 !== peg$FAILED) {
                              s2 = [];
                              s3 = peg$parse_();
                              while (s3 !== peg$FAILED) {
                                s2.push(s3);
                                s3 = peg$parse_();
                              }
                              s3 = peg$parsecomment();
                              if (s3 === peg$FAILED) {
                                s3 = null;
                              }
                              if (input.charCodeAt(peg$currPos) === 10) {
                                s4 = peg$c0;
                                peg$currPos++;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                              }
                              if (s4 === peg$FAILED) {
                                s4 = null;
                              }
                              peg$savedPos = s0;
                              s0 = peg$f25(s1);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parsebic_inst();
                              if (s1 !== peg$FAILED) {
                                s2 = [];
                                s3 = peg$parse_();
                                while (s3 !== peg$FAILED) {
                                  s2.push(s3);
                                  s3 = peg$parse_();
                                }
                                s3 = peg$parsecomment();
                                if (s3 === peg$FAILED) {
                                  s3 = null;
                                }
                                if (input.charCodeAt(peg$currPos) === 10) {
                                  s4 = peg$c0;
                                  peg$currPos++;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                }
                                if (s4 === peg$FAILED) {
                                  s4 = null;
                                }
                                peg$savedPos = s0;
                                s0 = peg$f26(s1);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseblr_inst();
                                if (s1 !== peg$FAILED) {
                                  s2 = [];
                                  s3 = peg$parse_();
                                  while (s3 !== peg$FAILED) {
                                    s2.push(s3);
                                    s3 = peg$parse_();
                                  }
                                  s3 = peg$parsecomment();
                                  if (s3 === peg$FAILED) {
                                    s3 = null;
                                  }
                                  if (input.charCodeAt(peg$currPos) === 10) {
                                    s4 = peg$c0;
                                    peg$currPos++;
                                  } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                  }
                                  if (s4 === peg$FAILED) {
                                    s4 = null;
                                  }
                                  peg$savedPos = s0;
                                  s0 = peg$f27(s1);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parsebl_inst();
                                  if (s1 !== peg$FAILED) {
                                    s2 = [];
                                    s3 = peg$parse_();
                                    while (s3 !== peg$FAILED) {
                                      s2.push(s3);
                                      s3 = peg$parse_();
                                    }
                                    s3 = peg$parsecomment();
                                    if (s3 === peg$FAILED) {
                                      s3 = null;
                                    }
                                    if (input.charCodeAt(peg$currPos) === 10) {
                                      s4 = peg$c0;
                                      peg$currPos++;
                                    } else {
                                      s4 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                    }
                                    if (s4 === peg$FAILED) {
                                      s4 = null;
                                    }
                                    peg$savedPos = s0;
                                    s0 = peg$f28(s1);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parsebrk_inst();
                                    if (s1 !== peg$FAILED) {
                                      s2 = [];
                                      s3 = peg$parse_();
                                      while (s3 !== peg$FAILED) {
                                        s2.push(s3);
                                        s3 = peg$parse_();
                                      }
                                      s3 = peg$parsecomment();
                                      if (s3 === peg$FAILED) {
                                        s3 = null;
                                      }
                                      if (input.charCodeAt(peg$currPos) === 10) {
                                        s4 = peg$c0;
                                        peg$currPos++;
                                      } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                      }
                                      if (s4 === peg$FAILED) {
                                        s4 = null;
                                      }
                                      peg$savedPos = s0;
                                      s0 = peg$f29(s1);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parsebr_inst();
                                      if (s1 !== peg$FAILED) {
                                        s2 = [];
                                        s3 = peg$parse_();
                                        while (s3 !== peg$FAILED) {
                                          s2.push(s3);
                                          s3 = peg$parse_();
                                        }
                                        s3 = peg$parsecomment();
                                        if (s3 === peg$FAILED) {
                                          s3 = null;
                                        }
                                        if (input.charCodeAt(peg$currPos) === 10) {
                                          s4 = peg$c0;
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                        }
                                        if (s4 === peg$FAILED) {
                                          s4 = null;
                                        }
                                        peg$savedPos = s0;
                                        s0 = peg$f30(s1);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseb_inst();
                                        if (s1 !== peg$FAILED) {
                                          s2 = [];
                                          s3 = peg$parse_();
                                          while (s3 !== peg$FAILED) {
                                            s2.push(s3);
                                            s3 = peg$parse_();
                                          }
                                          s3 = peg$parsecomment();
                                          if (s3 === peg$FAILED) {
                                            s3 = null;
                                          }
                                          if (input.charCodeAt(peg$currPos) === 10) {
                                            s4 = peg$c0;
                                            peg$currPos++;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                          }
                                          if (s4 === peg$FAILED) {
                                            s4 = null;
                                          }
                                          peg$savedPos = s0;
                                          s0 = peg$f31(s1);
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parsecasbh_inst();
                                          if (s1 !== peg$FAILED) {
                                            s2 = [];
                                            s3 = peg$parse_();
                                            while (s3 !== peg$FAILED) {
                                              s2.push(s3);
                                              s3 = peg$parse_();
                                            }
                                            s3 = peg$parsecomment();
                                            if (s3 === peg$FAILED) {
                                              s3 = null;
                                            }
                                            if (input.charCodeAt(peg$currPos) === 10) {
                                              s4 = peg$c0;
                                              peg$currPos++;
                                            } else {
                                              s4 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                            }
                                            if (s4 === peg$FAILED) {
                                              s4 = null;
                                            }
                                            peg$savedPos = s0;
                                            s0 = peg$f32(s1);
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parsecasp_inst();
                                            if (s1 !== peg$FAILED) {
                                              s2 = [];
                                              s3 = peg$parse_();
                                              while (s3 !== peg$FAILED) {
                                                s2.push(s3);
                                                s3 = peg$parse_();
                                              }
                                              s3 = peg$parsecomment();
                                              if (s3 === peg$FAILED) {
                                                s3 = null;
                                              }
                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                s4 = peg$c0;
                                                peg$currPos++;
                                              } else {
                                                s4 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                              }
                                              if (s4 === peg$FAILED) {
                                                s4 = null;
                                              }
                                              peg$savedPos = s0;
                                              s0 = peg$f33(s1);
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parsecas_inst();
                                              if (s1 !== peg$FAILED) {
                                                s2 = [];
                                                s3 = peg$parse_();
                                                while (s3 !== peg$FAILED) {
                                                  s2.push(s3);
                                                  s3 = peg$parse_();
                                                }
                                                s3 = peg$parsecomment();
                                                if (s3 === peg$FAILED) {
                                                  s3 = null;
                                                }
                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                  s4 = peg$c0;
                                                  peg$currPos++;
                                                } else {
                                                  s4 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                }
                                                if (s4 === peg$FAILED) {
                                                  s4 = null;
                                                }
                                                peg$savedPos = s0;
                                                s0 = peg$f34(s1);
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parsecbnz_inst();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = [];
                                                  s3 = peg$parse_();
                                                  while (s3 !== peg$FAILED) {
                                                    s2.push(s3);
                                                    s3 = peg$parse_();
                                                  }
                                                  s3 = peg$parsecomment();
                                                  if (s3 === peg$FAILED) {
                                                    s3 = null;
                                                  }
                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                    s4 = peg$c0;
                                                    peg$currPos++;
                                                  } else {
                                                    s4 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                  }
                                                  if (s4 === peg$FAILED) {
                                                    s4 = null;
                                                  }
                                                  peg$savedPos = s0;
                                                  s0 = peg$f35(s1);
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parsecbz_inst();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = [];
                                                    s3 = peg$parse_();
                                                    while (s3 !== peg$FAILED) {
                                                      s2.push(s3);
                                                      s3 = peg$parse_();
                                                    }
                                                    s3 = peg$parsecomment();
                                                    if (s3 === peg$FAILED) {
                                                      s3 = null;
                                                    }
                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                      s4 = peg$c0;
                                                      peg$currPos++;
                                                    } else {
                                                      s4 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                    }
                                                    if (s4 === peg$FAILED) {
                                                      s4 = null;
                                                    }
                                                    peg$savedPos = s0;
                                                    s0 = peg$f36(s1);
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseccmn_inst();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = [];
                                                      s3 = peg$parse_();
                                                      while (s3 !== peg$FAILED) {
                                                        s2.push(s3);
                                                        s3 = peg$parse_();
                                                      }
                                                      s3 = peg$parsecomment();
                                                      if (s3 === peg$FAILED) {
                                                        s3 = null;
                                                      }
                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                        s4 = peg$c0;
                                                        peg$currPos++;
                                                      } else {
                                                        s4 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                      }
                                                      if (s4 === peg$FAILED) {
                                                        s4 = null;
                                                      }
                                                      peg$savedPos = s0;
                                                      s0 = peg$f37(s1);
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseccmp_inst();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = [];
                                                        s3 = peg$parse_();
                                                        while (s3 !== peg$FAILED) {
                                                          s2.push(s3);
                                                          s3 = peg$parse_();
                                                        }
                                                        s3 = peg$parsecomment();
                                                        if (s3 === peg$FAILED) {
                                                          s3 = null;
                                                        }
                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                          s4 = peg$c0;
                                                          peg$currPos++;
                                                        } else {
                                                          s4 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                        }
                                                        if (s4 === peg$FAILED) {
                                                          s4 = null;
                                                        }
                                                        peg$savedPos = s0;
                                                        s0 = peg$f38(s1);
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parsecinc_inst();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = [];
                                                          s3 = peg$parse_();
                                                          while (s3 !== peg$FAILED) {
                                                            s2.push(s3);
                                                            s3 = peg$parse_();
                                                          }
                                                          s3 = peg$parsecomment();
                                                          if (s3 === peg$FAILED) {
                                                            s3 = null;
                                                          }
                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                            s4 = peg$c0;
                                                            peg$currPos++;
                                                          } else {
                                                            s4 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                          }
                                                          if (s4 === peg$FAILED) {
                                                            s4 = null;
                                                          }
                                                          peg$savedPos = s0;
                                                          s0 = peg$f39(s1);
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parsecinv_inst();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = [];
                                                            s3 = peg$parse_();
                                                            while (s3 !== peg$FAILED) {
                                                              s2.push(s3);
                                                              s3 = peg$parse_();
                                                            }
                                                            s3 = peg$parsecomment();
                                                            if (s3 === peg$FAILED) {
                                                              s3 = null;
                                                            }
                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                              s4 = peg$c0;
                                                              peg$currPos++;
                                                            } else {
                                                              s4 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                            }
                                                            if (s4 === peg$FAILED) {
                                                              s4 = null;
                                                            }
                                                            peg$savedPos = s0;
                                                            s0 = peg$f40(s1);
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseclrex_inst();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = [];
                                                              s3 = peg$parse_();
                                                              while (s3 !== peg$FAILED) {
                                                                s2.push(s3);
                                                                s3 = peg$parse_();
                                                              }
                                                              s3 = peg$parsecomment();
                                                              if (s3 === peg$FAILED) {
                                                                s3 = null;
                                                              }
                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                s4 = peg$c0;
                                                                peg$currPos++;
                                                              } else {
                                                                s4 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                              }
                                                              if (s4 === peg$FAILED) {
                                                                s4 = null;
                                                              }
                                                              peg$savedPos = s0;
                                                              s0 = peg$f41(s1);
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parsecls_inst();
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = [];
                                                                s3 = peg$parse_();
                                                                while (s3 !== peg$FAILED) {
                                                                  s2.push(s3);
                                                                  s3 = peg$parse_();
                                                                }
                                                                s3 = peg$parsecomment();
                                                                if (s3 === peg$FAILED) {
                                                                  s3 = null;
                                                                }
                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                  s4 = peg$c0;
                                                                  peg$currPos++;
                                                                } else {
                                                                  s4 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                }
                                                                if (s4 === peg$FAILED) {
                                                                  s4 = null;
                                                                }
                                                                peg$savedPos = s0;
                                                                s0 = peg$f42(s1);
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parseclz_inst();
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = [];
                                                                  s3 = peg$parse_();
                                                                  while (s3 !== peg$FAILED) {
                                                                    s2.push(s3);
                                                                    s3 = peg$parse_();
                                                                  }
                                                                  s3 = peg$parsecomment();
                                                                  if (s3 === peg$FAILED) {
                                                                    s3 = null;
                                                                  }
                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                    s4 = peg$c0;
                                                                    peg$currPos++;
                                                                  } else {
                                                                    s4 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                  }
                                                                  if (s4 === peg$FAILED) {
                                                                    s4 = null;
                                                                  }
                                                                  peg$savedPos = s0;
                                                                  s0 = peg$f43(s1);
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  s1 = peg$parsecmn_inst();
                                                                  if (s1 !== peg$FAILED) {
                                                                    s2 = [];
                                                                    s3 = peg$parse_();
                                                                    while (s3 !== peg$FAILED) {
                                                                      s2.push(s3);
                                                                      s3 = peg$parse_();
                                                                    }
                                                                    s3 = peg$parsecomment();
                                                                    if (s3 === peg$FAILED) {
                                                                      s3 = null;
                                                                    }
                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                      s4 = peg$c0;
                                                                      peg$currPos++;
                                                                    } else {
                                                                      s4 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                    }
                                                                    if (s4 === peg$FAILED) {
                                                                      s4 = null;
                                                                    }
                                                                    peg$savedPos = s0;
                                                                    s0 = peg$f44(s1);
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    s1 = peg$parsecmp_inst();
                                                                    if (s1 !== peg$FAILED) {
                                                                      s2 = [];
                                                                      s3 = peg$parse_();
                                                                      while (s3 !== peg$FAILED) {
                                                                        s2.push(s3);
                                                                        s3 = peg$parse_();
                                                                      }
                                                                      s3 = peg$parsecomment();
                                                                      if (s3 === peg$FAILED) {
                                                                        s3 = null;
                                                                      }
                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                        s4 = peg$c0;
                                                                        peg$currPos++;
                                                                      } else {
                                                                        s4 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                      }
                                                                      if (s4 === peg$FAILED) {
                                                                        s4 = null;
                                                                      }
                                                                      peg$savedPos = s0;
                                                                      s0 = peg$f45(s1);
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$currPos;
                                                                      s1 = peg$parsecneg_inst();
                                                                      if (s1 !== peg$FAILED) {
                                                                        s2 = [];
                                                                        s3 = peg$parse_();
                                                                        while (s3 !== peg$FAILED) {
                                                                          s2.push(s3);
                                                                          s3 = peg$parse_();
                                                                        }
                                                                        s3 = peg$parsecomment();
                                                                        if (s3 === peg$FAILED) {
                                                                          s3 = null;
                                                                        }
                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                          s4 = peg$c0;
                                                                          peg$currPos++;
                                                                        } else {
                                                                          s4 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                        }
                                                                        if (s4 === peg$FAILED) {
                                                                          s4 = null;
                                                                        }
                                                                        peg$savedPos = s0;
                                                                        s0 = peg$f46(s1);
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$currPos;
                                                                        s1 = peg$parsecrc32cx_inst();
                                                                        if (s1 !== peg$FAILED) {
                                                                          s2 = [];
                                                                          s3 = peg$parse_();
                                                                          while (s3 !== peg$FAILED) {
                                                                            s2.push(s3);
                                                                            s3 = peg$parse_();
                                                                          }
                                                                          s3 = peg$parsecomment();
                                                                          if (s3 === peg$FAILED) {
                                                                            s3 = null;
                                                                          }
                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                            s4 = peg$c0;
                                                                            peg$currPos++;
                                                                          } else {
                                                                            s4 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                          }
                                                                          if (s4 === peg$FAILED) {
                                                                            s4 = null;
                                                                          }
                                                                          peg$savedPos = s0;
                                                                          s0 = peg$f47(s1);
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$currPos;
                                                                          s1 = peg$parsecrc32cw_inst();
                                                                          if (s1 !== peg$FAILED) {
                                                                            s2 = [];
                                                                            s3 = peg$parse_();
                                                                            while (s3 !== peg$FAILED) {
                                                                              s2.push(s3);
                                                                              s3 = peg$parse_();
                                                                            }
                                                                            s3 = peg$parsecomment();
                                                                            if (s3 === peg$FAILED) {
                                                                              s3 = null;
                                                                            }
                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                              s4 = peg$c0;
                                                                              peg$currPos++;
                                                                            } else {
                                                                              s4 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                            }
                                                                            if (s4 === peg$FAILED) {
                                                                              s4 = null;
                                                                            }
                                                                            peg$savedPos = s0;
                                                                            s0 = peg$f48(s1);
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$currPos;
                                                                            s1 = peg$parsecrc32c_inst();
                                                                            if (s1 !== peg$FAILED) {
                                                                              s2 = [];
                                                                              s3 = peg$parse_();
                                                                              while (s3 !== peg$FAILED) {
                                                                                s2.push(s3);
                                                                                s3 = peg$parse_();
                                                                              }
                                                                              s3 = peg$parsecomment();
                                                                              if (s3 === peg$FAILED) {
                                                                                s3 = null;
                                                                              }
                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                s4 = peg$c0;
                                                                                peg$currPos++;
                                                                              } else {
                                                                                s4 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                              }
                                                                              if (s4 === peg$FAILED) {
                                                                                s4 = null;
                                                                              }
                                                                              peg$savedPos = s0;
                                                                              s0 = peg$f49(s1);
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$FAILED;
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$currPos;
                                                                              s1 = peg$parsecrc32w_inst();
                                                                              if (s1 !== peg$FAILED) {
                                                                                s2 = [];
                                                                                s3 = peg$parse_();
                                                                                while (s3 !== peg$FAILED) {
                                                                                  s2.push(s3);
                                                                                  s3 = peg$parse_();
                                                                                }
                                                                                s3 = peg$parsecomment();
                                                                                if (s3 === peg$FAILED) {
                                                                                  s3 = null;
                                                                                }
                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                  s4 = peg$c0;
                                                                                  peg$currPos++;
                                                                                } else {
                                                                                  s4 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                }
                                                                                if (s4 === peg$FAILED) {
                                                                                  s4 = null;
                                                                                }
                                                                                peg$savedPos = s0;
                                                                                s0 = peg$f50(s1);
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$currPos;
                                                                                s1 = peg$parsecrc32x_inst();
                                                                                if (s1 !== peg$FAILED) {
                                                                                  s2 = [];
                                                                                  s3 = peg$parse_();
                                                                                  while (s3 !== peg$FAILED) {
                                                                                    s2.push(s3);
                                                                                    s3 = peg$parse_();
                                                                                  }
                                                                                  s3 = peg$parsecomment();
                                                                                  if (s3 === peg$FAILED) {
                                                                                    s3 = null;
                                                                                  }
                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                    s4 = peg$c0;
                                                                                    peg$currPos++;
                                                                                  } else {
                                                                                    s4 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                  }
                                                                                  if (s4 === peg$FAILED) {
                                                                                    s4 = null;
                                                                                  }
                                                                                  peg$savedPos = s0;
                                                                                  s0 = peg$f51(s1);
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$FAILED;
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$currPos;
                                                                                  s1 = peg$parsecrc32_inst();
                                                                                  if (s1 !== peg$FAILED) {
                                                                                    s2 = [];
                                                                                    s3 = peg$parse_();
                                                                                    while (s3 !== peg$FAILED) {
                                                                                      s2.push(s3);
                                                                                      s3 = peg$parse_();
                                                                                    }
                                                                                    s3 = peg$parsecomment();
                                                                                    if (s3 === peg$FAILED) {
                                                                                      s3 = null;
                                                                                    }
                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                      s4 = peg$c0;
                                                                                      peg$currPos++;
                                                                                    } else {
                                                                                      s4 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                    }
                                                                                    if (s4 === peg$FAILED) {
                                                                                      s4 = null;
                                                                                    }
                                                                                    peg$savedPos = s0;
                                                                                    s0 = peg$f52(s1);
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$currPos;
                                                                                    s1 = peg$parsecsetm_inst();
                                                                                    if (s1 !== peg$FAILED) {
                                                                                      s2 = [];
                                                                                      s3 = peg$parse_();
                                                                                      while (s3 !== peg$FAILED) {
                                                                                        s2.push(s3);
                                                                                        s3 = peg$parse_();
                                                                                      }
                                                                                      s3 = peg$parsecomment();
                                                                                      if (s3 === peg$FAILED) {
                                                                                        s3 = null;
                                                                                      }
                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                        s4 = peg$c0;
                                                                                        peg$currPos++;
                                                                                      } else {
                                                                                        s4 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                      }
                                                                                      if (s4 === peg$FAILED) {
                                                                                        s4 = null;
                                                                                      }
                                                                                      peg$savedPos = s0;
                                                                                      s0 = peg$f53(s1);
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$currPos;
                                                                                      s1 = peg$parsecset_inst();
                                                                                      if (s1 !== peg$FAILED) {
                                                                                        s2 = [];
                                                                                        s3 = peg$parse_();
                                                                                        while (s3 !== peg$FAILED) {
                                                                                          s2.push(s3);
                                                                                          s3 = peg$parse_();
                                                                                        }
                                                                                        s3 = peg$parsecomment();
                                                                                        if (s3 === peg$FAILED) {
                                                                                          s3 = null;
                                                                                        }
                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                          s4 = peg$c0;
                                                                                          peg$currPos++;
                                                                                        } else {
                                                                                          s4 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                        }
                                                                                        if (s4 === peg$FAILED) {
                                                                                          s4 = null;
                                                                                        }
                                                                                        peg$savedPos = s0;
                                                                                        s0 = peg$f54(s1);
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$currPos;
                                                                                        s1 = peg$parsecsel_inst();
                                                                                        if (s1 !== peg$FAILED) {
                                                                                          s2 = [];
                                                                                          s3 = peg$parse_();
                                                                                          while (s3 !== peg$FAILED) {
                                                                                            s2.push(s3);
                                                                                            s3 = peg$parse_();
                                                                                          }
                                                                                          s3 = peg$parsecomment();
                                                                                          if (s3 === peg$FAILED) {
                                                                                            s3 = null;
                                                                                          }
                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                            s4 = peg$c0;
                                                                                            peg$currPos++;
                                                                                          } else {
                                                                                            s4 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                          }
                                                                                          if (s4 === peg$FAILED) {
                                                                                            s4 = null;
                                                                                          }
                                                                                          peg$savedPos = s0;
                                                                                          s0 = peg$f55(s1);
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$currPos;
                                                                                          s1 = peg$parsecsinc_inst();
                                                                                          if (s1 !== peg$FAILED) {
                                                                                            s2 = [];
                                                                                            s3 = peg$parse_();
                                                                                            while (s3 !== peg$FAILED) {
                                                                                              s2.push(s3);
                                                                                              s3 = peg$parse_();
                                                                                            }
                                                                                            s3 = peg$parsecomment();
                                                                                            if (s3 === peg$FAILED) {
                                                                                              s3 = null;
                                                                                            }
                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                              s4 = peg$c0;
                                                                                              peg$currPos++;
                                                                                            } else {
                                                                                              s4 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                            }
                                                                                            if (s4 === peg$FAILED) {
                                                                                              s4 = null;
                                                                                            }
                                                                                            peg$savedPos = s0;
                                                                                            s0 = peg$f56(s1);
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$currPos;
                                                                                            s1 = peg$parsecsinv_inst();
                                                                                            if (s1 !== peg$FAILED) {
                                                                                              s2 = [];
                                                                                              s3 = peg$parse_();
                                                                                              while (s3 !== peg$FAILED) {
                                                                                                s2.push(s3);
                                                                                                s3 = peg$parse_();
                                                                                              }
                                                                                              s3 = peg$parsecomment();
                                                                                              if (s3 === peg$FAILED) {
                                                                                                s3 = null;
                                                                                              }
                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                s4 = peg$c0;
                                                                                                peg$currPos++;
                                                                                              } else {
                                                                                                s4 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                              }
                                                                                              if (s4 === peg$FAILED) {
                                                                                                s4 = null;
                                                                                              }
                                                                                              peg$savedPos = s0;
                                                                                              s0 = peg$f57(s1);
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$currPos;
                                                                                              s1 = peg$parsecsneg_inst();
                                                                                              if (s1 !== peg$FAILED) {
                                                                                                s2 = [];
                                                                                                s3 = peg$parse_();
                                                                                                while (s3 !== peg$FAILED) {
                                                                                                  s2.push(s3);
                                                                                                  s3 = peg$parse_();
                                                                                                }
                                                                                                s3 = peg$parsecomment();
                                                                                                if (s3 === peg$FAILED) {
                                                                                                  s3 = null;
                                                                                                }
                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                  s4 = peg$c0;
                                                                                                  peg$currPos++;
                                                                                                } else {
                                                                                                  s4 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                }
                                                                                                if (s4 === peg$FAILED) {
                                                                                                  s4 = null;
                                                                                                }
                                                                                                peg$savedPos = s0;
                                                                                                s0 = peg$f58(s1);
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$currPos;
                                                                                                s1 = peg$parsedmb_inst();
                                                                                                if (s1 !== peg$FAILED) {
                                                                                                  s2 = [];
                                                                                                  s3 = peg$parse_();
                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                    s2.push(s3);
                                                                                                    s3 = peg$parse_();
                                                                                                  }
                                                                                                  s3 = peg$parsecomment();
                                                                                                  if (s3 === peg$FAILED) {
                                                                                                    s3 = null;
                                                                                                  }
                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                    s4 = peg$c0;
                                                                                                    peg$currPos++;
                                                                                                  } else {
                                                                                                    s4 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                  }
                                                                                                  if (s4 === peg$FAILED) {
                                                                                                    s4 = null;
                                                                                                  }
                                                                                                  peg$savedPos = s0;
                                                                                                  s0 = peg$f59(s1);
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$FAILED;
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$currPos;
                                                                                                  s1 = peg$parsedsb_inst();
                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                    s2 = [];
                                                                                                    s3 = peg$parse_();
                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                      s2.push(s3);
                                                                                                      s3 = peg$parse_();
                                                                                                    }
                                                                                                    s3 = peg$parsecomment();
                                                                                                    if (s3 === peg$FAILED) {
                                                                                                      s3 = null;
                                                                                                    }
                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                      s4 = peg$c0;
                                                                                                      peg$currPos++;
                                                                                                    } else {
                                                                                                      s4 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                    }
                                                                                                    if (s4 === peg$FAILED) {
                                                                                                      s4 = null;
                                                                                                    }
                                                                                                    peg$savedPos = s0;
                                                                                                    s0 = peg$f60(s1);
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$currPos;
                                                                                                    s1 = peg$parseeon_inst();
                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                      s2 = [];
                                                                                                      s3 = peg$parse_();
                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                        s2.push(s3);
                                                                                                        s3 = peg$parse_();
                                                                                                      }
                                                                                                      s3 = peg$parsecomment();
                                                                                                      if (s3 === peg$FAILED) {
                                                                                                        s3 = null;
                                                                                                      }
                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                        s4 = peg$c0;
                                                                                                        peg$currPos++;
                                                                                                      } else {
                                                                                                        s4 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                      }
                                                                                                      if (s4 === peg$FAILED) {
                                                                                                        s4 = null;
                                                                                                      }
                                                                                                      peg$savedPos = s0;
                                                                                                      s0 = peg$f61(s1);
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$FAILED;
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$currPos;
                                                                                                      s1 = peg$parseeor_inst();
                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                        s2 = [];
                                                                                                        s3 = peg$parse_();
                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                          s2.push(s3);
                                                                                                          s3 = peg$parse_();
                                                                                                        }
                                                                                                        s3 = peg$parsecomment();
                                                                                                        if (s3 === peg$FAILED) {
                                                                                                          s3 = null;
                                                                                                        }
                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                          s4 = peg$c0;
                                                                                                          peg$currPos++;
                                                                                                        } else {
                                                                                                          s4 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                        }
                                                                                                        if (s4 === peg$FAILED) {
                                                                                                          s4 = null;
                                                                                                        }
                                                                                                        peg$savedPos = s0;
                                                                                                        s0 = peg$f62(s1);
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$currPos;
                                                                                                        s1 = peg$parseeret_inst();
                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                          s2 = [];
                                                                                                          s3 = peg$parse_();
                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                            s2.push(s3);
                                                                                                            s3 = peg$parse_();
                                                                                                          }
                                                                                                          s3 = peg$parsecomment();
                                                                                                          if (s3 === peg$FAILED) {
                                                                                                            s3 = null;
                                                                                                          }
                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                            s4 = peg$c0;
                                                                                                            peg$currPos++;
                                                                                                          } else {
                                                                                                            s4 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                          }
                                                                                                          if (s4 === peg$FAILED) {
                                                                                                            s4 = null;
                                                                                                          }
                                                                                                          peg$savedPos = s0;
                                                                                                          s0 = peg$f63(s1);
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$FAILED;
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$currPos;
                                                                                                          s1 = peg$parseextr_inst();
                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                            s2 = [];
                                                                                                            s3 = peg$parse_();
                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                              s2.push(s3);
                                                                                                              s3 = peg$parse_();
                                                                                                            }
                                                                                                            s3 = peg$parsecomment();
                                                                                                            if (s3 === peg$FAILED) {
                                                                                                              s3 = null;
                                                                                                            }
                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                              s4 = peg$c0;
                                                                                                              peg$currPos++;
                                                                                                            } else {
                                                                                                              s4 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                            }
                                                                                                            if (s4 === peg$FAILED) {
                                                                                                              s4 = null;
                                                                                                            }
                                                                                                            peg$savedPos = s0;
                                                                                                            s0 = peg$f64(s1);
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$FAILED;
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$currPos;
                                                                                                            s1 = peg$parsehvc_inst();
                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                              s2 = [];
                                                                                                              s3 = peg$parse_();
                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                s2.push(s3);
                                                                                                                s3 = peg$parse_();
                                                                                                              }
                                                                                                              s3 = peg$parsecomment();
                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                s3 = null;
                                                                                                              }
                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                s4 = peg$c0;
                                                                                                                peg$currPos++;
                                                                                                              } else {
                                                                                                                s4 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                              }
                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                s4 = null;
                                                                                                              }
                                                                                                              peg$savedPos = s0;
                                                                                                              s0 = peg$f65(s1);
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$FAILED;
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$currPos;
                                                                                                              s1 = peg$parseisb_inst();
                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                s2 = [];
                                                                                                                s3 = peg$parse_();
                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                  s2.push(s3);
                                                                                                                  s3 = peg$parse_();
                                                                                                                }
                                                                                                                s3 = peg$parsecomment();
                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                  s3 = null;
                                                                                                                }
                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                  s4 = peg$c0;
                                                                                                                  peg$currPos++;
                                                                                                                } else {
                                                                                                                  s4 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                }
                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                  s4 = null;
                                                                                                                }
                                                                                                                peg$savedPos = s0;
                                                                                                                s0 = peg$f66(s1);
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$FAILED;
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$currPos;
                                                                                                                s1 = peg$parseldaobh_inst();
                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                  s2 = [];
                                                                                                                  s3 = peg$parse_();
                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                    s2.push(s3);
                                                                                                                    s3 = peg$parse_();
                                                                                                                  }
                                                                                                                  s3 = peg$parsecomment();
                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                    s3 = null;
                                                                                                                  }
                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                    s4 = peg$c0;
                                                                                                                    peg$currPos++;
                                                                                                                  } else {
                                                                                                                    s4 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                  }
                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                    s4 = null;
                                                                                                                  }
                                                                                                                  peg$savedPos = s0;
                                                                                                                  s0 = peg$f67(s1);
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$FAILED;
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$currPos;
                                                                                                                  s1 = peg$parseldao_inst();
                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                    s2 = [];
                                                                                                                    s3 = peg$parse_();
                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                      s2.push(s3);
                                                                                                                      s3 = peg$parse_();
                                                                                                                    }
                                                                                                                    s3 = peg$parsecomment();
                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                      s3 = null;
                                                                                                                    }
                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                      s4 = peg$c0;
                                                                                                                      peg$currPos++;
                                                                                                                    } else {
                                                                                                                      s4 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                    }
                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                      s4 = null;
                                                                                                                    }
                                                                                                                    peg$savedPos = s0;
                                                                                                                    s0 = peg$f68(s1);
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$FAILED;
                                                                                                                  }
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$currPos;
                                                                                                                    s1 = peg$parseldaxrbh_inst();
                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                      s2 = [];
                                                                                                                      s3 = peg$parse_();
                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                        s2.push(s3);
                                                                                                                        s3 = peg$parse_();
                                                                                                                      }
                                                                                                                      s3 = peg$parsecomment();
                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                        s3 = null;
                                                                                                                      }
                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                        s4 = peg$c0;
                                                                                                                        peg$currPos++;
                                                                                                                      } else {
                                                                                                                        s4 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                      }
                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                        s4 = null;
                                                                                                                      }
                                                                                                                      peg$savedPos = s0;
                                                                                                                      s0 = peg$f69(s1);
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$FAILED;
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$currPos;
                                                                                                                      s1 = peg$parseldaxr_inst();
                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                        s2 = [];
                                                                                                                        s3 = peg$parse_();
                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                          s2.push(s3);
                                                                                                                          s3 = peg$parse_();
                                                                                                                        }
                                                                                                                        s3 = peg$parsecomment();
                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                          s3 = null;
                                                                                                                        }
                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                          s4 = peg$c0;
                                                                                                                          peg$currPos++;
                                                                                                                        } else {
                                                                                                                          s4 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                        }
                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                          s4 = null;
                                                                                                                        }
                                                                                                                        peg$savedPos = s0;
                                                                                                                        s0 = peg$f70(s1);
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$FAILED;
                                                                                                                      }
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$currPos;
                                                                                                                        s1 = peg$parseldaxp_inst();
                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                          s2 = [];
                                                                                                                          s3 = peg$parse_();
                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                            s2.push(s3);
                                                                                                                            s3 = peg$parse_();
                                                                                                                          }
                                                                                                                          s3 = peg$parsecomment();
                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                            s3 = null;
                                                                                                                          }
                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                            s4 = peg$c0;
                                                                                                                            peg$currPos++;
                                                                                                                          } else {
                                                                                                                            s4 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                          }
                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                            s4 = null;
                                                                                                                          }
                                                                                                                          peg$savedPos = s0;
                                                                                                                          s0 = peg$f71(s1);
                                                                                                                        } else {
                                                                                                                          peg$currPos = s0;
                                                                                                                          s0 = peg$FAILED;
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$currPos;
                                                                                                                          s1 = peg$parseldnp_inst();
                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                            s2 = [];
                                                                                                                            s3 = peg$parse_();
                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                              s2.push(s3);
                                                                                                                              s3 = peg$parse_();
                                                                                                                            }
                                                                                                                            s3 = peg$parsecomment();
                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                              s3 = null;
                                                                                                                            }
                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                              s4 = peg$c0;
                                                                                                                              peg$currPos++;
                                                                                                                            } else {
                                                                                                                              s4 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                            }
                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                              s4 = null;
                                                                                                                            }
                                                                                                                            peg$savedPos = s0;
                                                                                                                            s0 = peg$f72(s1);
                                                                                                                          } else {
                                                                                                                            peg$currPos = s0;
                                                                                                                            s0 = peg$FAILED;
                                                                                                                          }
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$currPos;
                                                                                                                            s1 = peg$parseldpsw_inst();
                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                              s2 = [];
                                                                                                                              s3 = peg$parse_();
                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                s2.push(s3);
                                                                                                                                s3 = peg$parse_();
                                                                                                                              }
                                                                                                                              s3 = peg$parsecomment();
                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                s3 = null;
                                                                                                                              }
                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                s4 = peg$c0;
                                                                                                                                peg$currPos++;
                                                                                                                              } else {
                                                                                                                                s4 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                              }
                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                s4 = null;
                                                                                                                              }
                                                                                                                              peg$savedPos = s0;
                                                                                                                              s0 = peg$f73(s1);
                                                                                                                            } else {
                                                                                                                              peg$currPos = s0;
                                                                                                                              s0 = peg$FAILED;
                                                                                                                            }
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$currPos;
                                                                                                                              s1 = peg$parseldp_inst();
                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                s2 = [];
                                                                                                                                s3 = peg$parse_();
                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                  s2.push(s3);
                                                                                                                                  s3 = peg$parse_();
                                                                                                                                }
                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                  s3 = null;
                                                                                                                                }
                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                  s4 = peg$c0;
                                                                                                                                  peg$currPos++;
                                                                                                                                } else {
                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                }
                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                  s4 = null;
                                                                                                                                }
                                                                                                                                peg$savedPos = s0;
                                                                                                                                s0 = peg$f74(s1);
                                                                                                                              } else {
                                                                                                                                peg$currPos = s0;
                                                                                                                                s0 = peg$FAILED;
                                                                                                                              }
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$currPos;
                                                                                                                                s1 = peg$parseldtrsbh_inst();
                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                  s2 = [];
                                                                                                                                  s3 = peg$parse_();
                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                    s2.push(s3);
                                                                                                                                    s3 = peg$parse_();
                                                                                                                                  }
                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                    s3 = null;
                                                                                                                                  }
                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                    s4 = peg$c0;
                                                                                                                                    peg$currPos++;
                                                                                                                                  } else {
                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                  }
                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                    s4 = null;
                                                                                                                                  }
                                                                                                                                  peg$savedPos = s0;
                                                                                                                                  s0 = peg$f75(s1);
                                                                                                                                } else {
                                                                                                                                  peg$currPos = s0;
                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                }
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$currPos;
                                                                                                                                  s1 = peg$parseldtrsw_inst();
                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                    s2 = [];
                                                                                                                                    s3 = peg$parse_();
                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                      s2.push(s3);
                                                                                                                                      s3 = peg$parse_();
                                                                                                                                    }
                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                      s3 = null;
                                                                                                                                    }
                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                      s4 = peg$c0;
                                                                                                                                      peg$currPos++;
                                                                                                                                    } else {
                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                    }
                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                      s4 = null;
                                                                                                                                    }
                                                                                                                                    peg$savedPos = s0;
                                                                                                                                    s0 = peg$f76(s1);
                                                                                                                                  } else {
                                                                                                                                    peg$currPos = s0;
                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                  }
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$currPos;
                                                                                                                                    s1 = peg$parseldtrbh_inst();
                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                      s2 = [];
                                                                                                                                      s3 = peg$parse_();
                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                        s2.push(s3);
                                                                                                                                        s3 = peg$parse_();
                                                                                                                                      }
                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                        s3 = null;
                                                                                                                                      }
                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                        s4 = peg$c0;
                                                                                                                                        peg$currPos++;
                                                                                                                                      } else {
                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                      }
                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                        s4 = null;
                                                                                                                                      }
                                                                                                                                      peg$savedPos = s0;
                                                                                                                                      s0 = peg$f77(s1);
                                                                                                                                    } else {
                                                                                                                                      peg$currPos = s0;
                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                    }
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$currPos;
                                                                                                                                      s1 = peg$parseldtr_inst();
                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                        s2 = [];
                                                                                                                                        s3 = peg$parse_();
                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                          s2.push(s3);
                                                                                                                                          s3 = peg$parse_();
                                                                                                                                        }
                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                          s3 = null;
                                                                                                                                        }
                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                          s4 = peg$c0;
                                                                                                                                          peg$currPos++;
                                                                                                                                        } else {
                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                        }
                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                          s4 = null;
                                                                                                                                        }
                                                                                                                                        peg$savedPos = s0;
                                                                                                                                        s0 = peg$f78(s1);
                                                                                                                                      } else {
                                                                                                                                        peg$currPos = s0;
                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                      }
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$currPos;
                                                                                                                                        s1 = peg$parseldursbh_inst();
                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                          s2 = [];
                                                                                                                                          s3 = peg$parse_();
                                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                                            s2.push(s3);
                                                                                                                                            s3 = peg$parse_();
                                                                                                                                          }
                                                                                                                                          s3 = peg$parsecomment();
                                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                                            s3 = null;
                                                                                                                                          }
                                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                            s4 = peg$c0;
                                                                                                                                            peg$currPos++;
                                                                                                                                          } else {
                                                                                                                                            s4 = peg$FAILED;
                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                          }
                                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                                            s4 = null;
                                                                                                                                          }
                                                                                                                                          peg$savedPos = s0;
                                                                                                                                          s0 = peg$f79(s1);
                                                                                                                                        } else {
                                                                                                                                          peg$currPos = s0;
                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                        }
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$currPos;
                                                                                                                                          s1 = peg$parseldursw_inst();
                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                            s2 = [];
                                                                                                                                            s3 = peg$parse_();
                                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                                              s2.push(s3);
                                                                                                                                              s3 = peg$parse_();
                                                                                                                                            }
                                                                                                                                            s3 = peg$parsecomment();
                                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                                              s3 = null;
                                                                                                                                            }
                                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                              s4 = peg$c0;
                                                                                                                                              peg$currPos++;
                                                                                                                                            } else {
                                                                                                                                              s4 = peg$FAILED;
                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                            }
                                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                                              s4 = null;
                                                                                                                                            }
                                                                                                                                            peg$savedPos = s0;
                                                                                                                                            s0 = peg$f80(s1);
                                                                                                                                          } else {
                                                                                                                                            peg$currPos = s0;
                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                          }
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            s0 = peg$currPos;
                                                                                                                                            s1 = peg$parseldurbh_inst();
                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                              s2 = [];
                                                                                                                                              s3 = peg$parse_();
                                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                                s2.push(s3);
                                                                                                                                                s3 = peg$parse_();
                                                                                                                                              }
                                                                                                                                              s3 = peg$parsecomment();
                                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                                s3 = null;
                                                                                                                                              }
                                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                s4 = peg$c0;
                                                                                                                                                peg$currPos++;
                                                                                                                                              } else {
                                                                                                                                                s4 = peg$FAILED;
                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                              }
                                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                                s4 = null;
                                                                                                                                              }
                                                                                                                                              peg$savedPos = s0;
                                                                                                                                              s0 = peg$f81(s1);
                                                                                                                                            } else {
                                                                                                                                              peg$currPos = s0;
                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                            }
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              s0 = peg$currPos;
                                                                                                                                              s1 = peg$parseldur_inst();
                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                s2 = [];
                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                                  s2.push(s3);
                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                }
                                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                                  s3 = null;
                                                                                                                                                }
                                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                  s4 = peg$c0;
                                                                                                                                                  peg$currPos++;
                                                                                                                                                } else {
                                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                }
                                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                                  s4 = null;
                                                                                                                                                }
                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                s0 = peg$f82(s1);
                                                                                                                                              } else {
                                                                                                                                                peg$currPos = s0;
                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                              }
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                s1 = peg$parselsl_inst();
                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                  s2 = [];
                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                                    s2.push(s3);
                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                  }
                                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                                    s3 = null;
                                                                                                                                                  }
                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                    s4 = peg$c0;
                                                                                                                                                    peg$currPos++;
                                                                                                                                                  } else {
                                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                  }
                                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                                    s4 = null;
                                                                                                                                                  }
                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                  s0 = peg$f83(s1);
                                                                                                                                                } else {
                                                                                                                                                  peg$currPos = s0;
                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                }
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                  s1 = peg$parselsr_inst();
                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                    s2 = [];
                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                                      s2.push(s3);
                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                    }
                                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                                      s3 = null;
                                                                                                                                                    }
                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                      s4 = peg$c0;
                                                                                                                                                      peg$currPos++;
                                                                                                                                                    } else {
                                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                    }
                                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                                      s4 = null;
                                                                                                                                                    }
                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                    s0 = peg$f84(s1);
                                                                                                                                                  } else {
                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                  }
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                    s1 = peg$parsemadd_inst();
                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                      s2 = [];
                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                                        s2.push(s3);
                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                      }
                                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                                        s3 = null;
                                                                                                                                                      }
                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                        s4 = peg$c0;
                                                                                                                                                        peg$currPos++;
                                                                                                                                                      } else {
                                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                      }
                                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                                        s4 = null;
                                                                                                                                                      }
                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                      s0 = peg$f85(s1);
                                                                                                                                                    } else {
                                                                                                                                                      peg$currPos = s0;
                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                    }
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                      s1 = peg$parsemneg_inst();
                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                        s2 = [];
                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                                          s2.push(s3);
                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                        }
                                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                                          s3 = null;
                                                                                                                                                        }
                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                          s4 = peg$c0;
                                                                                                                                                          peg$currPos++;
                                                                                                                                                        } else {
                                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                        }
                                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                                          s4 = null;
                                                                                                                                                        }
                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                        s0 = peg$f86(s1);
                                                                                                                                                      } else {
                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                      }
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        s0 = peg$currPos;
                                                                                                                                                        s1 = peg$parsemovk_inst();
                                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                                          s2 = [];
                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                                                            s2.push(s3);
                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                          }
                                                                                                                                                          s3 = peg$parsecomment();
                                                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                                                            s3 = null;
                                                                                                                                                          }
                                                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                            s4 = peg$c0;
                                                                                                                                                            peg$currPos++;
                                                                                                                                                          } else {
                                                                                                                                                            s4 = peg$FAILED;
                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                          }
                                                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                                                            s4 = null;
                                                                                                                                                          }
                                                                                                                                                          peg$savedPos = s0;
                                                                                                                                                          s0 = peg$f87(s1);
                                                                                                                                                        } else {
                                                                                                                                                          peg$currPos = s0;
                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                        }
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          s0 = peg$currPos;
                                                                                                                                                          s1 = peg$parsemovn_inst();
                                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                                            s2 = [];
                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                                                              s2.push(s3);
                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                            }
                                                                                                                                                            s3 = peg$parsecomment();
                                                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                                                              s3 = null;
                                                                                                                                                            }
                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                              s4 = peg$c0;
                                                                                                                                                              peg$currPos++;
                                                                                                                                                            } else {
                                                                                                                                                              s4 = peg$FAILED;
                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                            }
                                                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                                                              s4 = null;
                                                                                                                                                            }
                                                                                                                                                            peg$savedPos = s0;
                                                                                                                                                            s0 = peg$f88(s1);
                                                                                                                                                          } else {
                                                                                                                                                            peg$currPos = s0;
                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                          }
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            s0 = peg$currPos;
                                                                                                                                                            s1 = peg$parsemovz_inst();
                                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                                              s2 = [];
                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                                                s2.push(s3);
                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                              }
                                                                                                                                                              s3 = peg$parsecomment();
                                                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                                                s3 = null;
                                                                                                                                                              }
                                                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                s4 = peg$c0;
                                                                                                                                                                peg$currPos++;
                                                                                                                                                              } else {
                                                                                                                                                                s4 = peg$FAILED;
                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                              }
                                                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                                                s4 = null;
                                                                                                                                                              }
                                                                                                                                                              peg$savedPos = s0;
                                                                                                                                                              s0 = peg$f89(s1);
                                                                                                                                                            } else {
                                                                                                                                                              peg$currPos = s0;
                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                            }
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              s0 = peg$currPos;
                                                                                                                                                              s1 = peg$parsemov_inst();
                                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                                s2 = [];
                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                                                  s2.push(s3);
                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                }
                                                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                                                  s3 = null;
                                                                                                                                                                }
                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                  s4 = peg$c0;
                                                                                                                                                                  peg$currPos++;
                                                                                                                                                                } else {
                                                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                }
                                                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                                                  s4 = null;
                                                                                                                                                                }
                                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                                s0 = peg$f90(s1);
                                                                                                                                                              } else {
                                                                                                                                                                peg$currPos = s0;
                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                              }
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                                s1 = peg$parsemsub_inst();
                                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                                  s2 = [];
                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                                                    s2.push(s3);
                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                  }
                                                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                                                    s3 = null;
                                                                                                                                                                  }
                                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                    s4 = peg$c0;
                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                  } else {
                                                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                  }
                                                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                                                    s4 = null;
                                                                                                                                                                  }
                                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                                  s0 = peg$f91(s1);
                                                                                                                                                                } else {
                                                                                                                                                                  peg$currPos = s0;
                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                }
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                                  s1 = peg$parsemsr_inst();
                                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                                    s2 = [];
                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                                                      s2.push(s3);
                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                    }
                                                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                                                      s3 = null;
                                                                                                                                                                    }
                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                      s4 = peg$c0;
                                                                                                                                                                      peg$currPos++;
                                                                                                                                                                    } else {
                                                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                    }
                                                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                                                      s4 = null;
                                                                                                                                                                    }
                                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                                    s0 = peg$f92(s1);
                                                                                                                                                                  } else {
                                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                  }
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                                    s1 = peg$parsemrs_inst();
                                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                                      s2 = [];
                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                                                        s2.push(s3);
                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                      }
                                                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                                                        s3 = null;
                                                                                                                                                                      }
                                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                        s4 = peg$c0;
                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                      } else {
                                                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                      }
                                                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                                                        s4 = null;
                                                                                                                                                                      }
                                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                                      s0 = peg$f93(s1);
                                                                                                                                                                    } else {
                                                                                                                                                                      peg$currPos = s0;
                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                    }
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                                      s1 = peg$parsemul_inst();
                                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                                        s2 = [];
                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                                                          s2.push(s3);
                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                        }
                                                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                                                          s3 = null;
                                                                                                                                                                        }
                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                          s4 = peg$c0;
                                                                                                                                                                          peg$currPos++;
                                                                                                                                                                        } else {
                                                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                        }
                                                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                                                          s4 = null;
                                                                                                                                                                        }
                                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                                        s0 = peg$f94(s1);
                                                                                                                                                                      } else {
                                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                      }
                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                        s0 = peg$currPos;
                                                                                                                                                                        s1 = peg$parsemvn_inst();
                                                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                                                          s2 = [];
                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                                                                            s2.push(s3);
                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                          }
                                                                                                                                                                          s3 = peg$parsecomment();
                                                                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                                                                            s3 = null;
                                                                                                                                                                          }
                                                                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                            s4 = peg$c0;
                                                                                                                                                                            peg$currPos++;
                                                                                                                                                                          } else {
                                                                                                                                                                            s4 = peg$FAILED;
                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                          }
                                                                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                                                                            s4 = null;
                                                                                                                                                                          }
                                                                                                                                                                          peg$savedPos = s0;
                                                                                                                                                                          s0 = peg$f95(s1);
                                                                                                                                                                        } else {
                                                                                                                                                                          peg$currPos = s0;
                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                        }
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                          s0 = peg$currPos;
                                                                                                                                                                          s1 = peg$parseneg_inst();
                                                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                                                            s2 = [];
                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                                                                              s2.push(s3);
                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                            }
                                                                                                                                                                            s3 = peg$parsecomment();
                                                                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                                                                              s3 = null;
                                                                                                                                                                            }
                                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                              s4 = peg$c0;
                                                                                                                                                                              peg$currPos++;
                                                                                                                                                                            } else {
                                                                                                                                                                              s4 = peg$FAILED;
                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                            }
                                                                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                                                                              s4 = null;
                                                                                                                                                                            }
                                                                                                                                                                            peg$savedPos = s0;
                                                                                                                                                                            s0 = peg$f96(s1);
                                                                                                                                                                          } else {
                                                                                                                                                                            peg$currPos = s0;
                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                          }
                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                            s0 = peg$currPos;
                                                                                                                                                                            s1 = peg$parsengc_inst();
                                                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                                                              s2 = [];
                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                                                                s2.push(s3);
                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                              }
                                                                                                                                                                              s3 = peg$parsecomment();
                                                                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                                                                s3 = null;
                                                                                                                                                                              }
                                                                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                s4 = peg$c0;
                                                                                                                                                                                peg$currPos++;
                                                                                                                                                                              } else {
                                                                                                                                                                                s4 = peg$FAILED;
                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                              }
                                                                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                                                                s4 = null;
                                                                                                                                                                              }
                                                                                                                                                                              peg$savedPos = s0;
                                                                                                                                                                              s0 = peg$f97(s1);
                                                                                                                                                                            } else {
                                                                                                                                                                              peg$currPos = s0;
                                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                                            }
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                              s0 = peg$currPos;
                                                                                                                                                                              s1 = peg$parsenop_inst();
                                                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                                                s2 = [];
                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                                                                  s2.push(s3);
                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                }
                                                                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                                                                  s3 = null;
                                                                                                                                                                                }
                                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                  s4 = peg$c0;
                                                                                                                                                                                  peg$currPos++;
                                                                                                                                                                                } else {
                                                                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                }
                                                                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                                                                  s4 = null;
                                                                                                                                                                                }
                                                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                                                s0 = peg$f98(s1);
                                                                                                                                                                              } else {
                                                                                                                                                                                peg$currPos = s0;
                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                              }
                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                                                s1 = peg$parseorn_inst();
                                                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                                                  s2 = [];
                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                                                                    s2.push(s3);
                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                  }
                                                                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                                                                    s3 = null;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                    s4 = peg$c0;
                                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                                  } else {
                                                                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                  }
                                                                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                                                                    s4 = null;
                                                                                                                                                                                  }
                                                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                                                  s0 = peg$f99(s1);
                                                                                                                                                                                } else {
                                                                                                                                                                                  peg$currPos = s0;
                                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                                }
                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                                                  s1 = peg$parseorr_inst();
                                                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                                                    s2 = [];
                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                                                                      s2.push(s3);
                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                    }
                                                                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                                                                      s3 = null;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                      s4 = peg$c0;
                                                                                                                                                                                      peg$currPos++;
                                                                                                                                                                                    } else {
                                                                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                    }
                                                                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                                                                      s4 = null;
                                                                                                                                                                                    }
                                                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                                                    s0 = peg$f100(s1);
                                                                                                                                                                                  } else {
                                                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                                                    s1 = peg$parseprfm_inst();
                                                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                                                      s2 = [];
                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                                                                        s2.push(s3);
                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                      }
                                                                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                                                                        s3 = null;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                        s4 = peg$c0;
                                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                                      } else {
                                                                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                      }
                                                                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                                                                        s4 = null;
                                                                                                                                                                                      }
                                                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                                                      s0 = peg$f101(s1);
                                                                                                                                                                                    } else {
                                                                                                                                                                                      peg$currPos = s0;
                                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                                                      s1 = peg$parserbit_inst();
                                                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                                                        s2 = [];
                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                                                                          s2.push(s3);
                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                        }
                                                                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                                                                          s3 = null;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                          s4 = peg$c0;
                                                                                                                                                                                          peg$currPos++;
                                                                                                                                                                                        } else {
                                                                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                        }
                                                                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                                                                          s4 = null;
                                                                                                                                                                                        }
                                                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                                                        s0 = peg$f102(s1);
                                                                                                                                                                                      } else {
                                                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                        s0 = peg$currPos;
                                                                                                                                                                                        s1 = peg$parserev32_inst();
                                                                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                                                                          s2 = [];
                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                                                                                            s2.push(s3);
                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                          }
                                                                                                                                                                                          s3 = peg$parsecomment();
                                                                                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                                                                                            s3 = null;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                            s4 = peg$c0;
                                                                                                                                                                                            peg$currPos++;
                                                                                                                                                                                          } else {
                                                                                                                                                                                            s4 = peg$FAILED;
                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                          }
                                                                                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                                                                                            s4 = null;
                                                                                                                                                                                          }
                                                                                                                                                                                          peg$savedPos = s0;
                                                                                                                                                                                          s0 = peg$f103(s1);
                                                                                                                                                                                        } else {
                                                                                                                                                                                          peg$currPos = s0;
                                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                          s0 = peg$currPos;
                                                                                                                                                                                          s1 = peg$parserev16_inst();
                                                                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                                                                            s2 = [];
                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                                                                                              s2.push(s3);
                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                            }
                                                                                                                                                                                            s3 = peg$parsecomment();
                                                                                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                                                                                              s3 = null;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                              s4 = peg$c0;
                                                                                                                                                                                              peg$currPos++;
                                                                                                                                                                                            } else {
                                                                                                                                                                                              s4 = peg$FAILED;
                                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                            }
                                                                                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                                                                                              s4 = null;
                                                                                                                                                                                            }
                                                                                                                                                                                            peg$savedPos = s0;
                                                                                                                                                                                            s0 = peg$f104(s1);
                                                                                                                                                                                          } else {
                                                                                                                                                                                            peg$currPos = s0;
                                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                            s0 = peg$currPos;
                                                                                                                                                                                            s1 = peg$parserev_inst();
                                                                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                                                                              s2 = [];
                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                                                                                s2.push(s3);
                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                              }
                                                                                                                                                                                              s3 = peg$parsecomment();
                                                                                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                                                                                s3 = null;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                s4 = peg$c0;
                                                                                                                                                                                                peg$currPos++;
                                                                                                                                                                                              } else {
                                                                                                                                                                                                s4 = peg$FAILED;
                                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                              }
                                                                                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                                                                                s4 = null;
                                                                                                                                                                                              }
                                                                                                                                                                                              peg$savedPos = s0;
                                                                                                                                                                                              s0 = peg$f105(s1);
                                                                                                                                                                                            } else {
                                                                                                                                                                                              peg$currPos = s0;
                                                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                              s0 = peg$currPos;
                                                                                                                                                                                              s1 = peg$parseror_inst();
                                                                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                                                                s2 = [];
                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                                                                                  s2.push(s3);
                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                }
                                                                                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                                                                                  s3 = null;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                  s4 = peg$c0;
                                                                                                                                                                                                  peg$currPos++;
                                                                                                                                                                                                } else {
                                                                                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                }
                                                                                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                                                                                  s4 = null;
                                                                                                                                                                                                }
                                                                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                                                                s0 = peg$f106(s1);
                                                                                                                                                                                              } else {
                                                                                                                                                                                                peg$currPos = s0;
                                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                                                                s1 = peg$parseret_inst();
                                                                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                                                                  s2 = [];
                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                                                                                    s2.push(s3);
                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                  }
                                                                                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                                                                                    s3 = null;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                    s4 = peg$c0;
                                                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                                                  } else {
                                                                                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                                                                                    s4 = null;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                                                                  s0 = peg$f107(s1);
                                                                                                                                                                                                } else {
                                                                                                                                                                                                  peg$currPos = s0;
                                                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                                                                  s1 = peg$parsesbc_inst();
                                                                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                                                                    s2 = [];
                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                                                                                      s2.push(s3);
                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                    }
                                                                                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                                                                                      s3 = null;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                      s4 = peg$c0;
                                                                                                                                                                                                      peg$currPos++;
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                                                                                      s4 = null;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                                                                    s0 = peg$f108(s1);
                                                                                                                                                                                                  } else {
                                                                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                                                                    s1 = peg$parsesdiv_inst();
                                                                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                                                                      s2 = [];
                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                                                                                        s2.push(s3);
                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                      }
                                                                                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                                                                                        s3 = null;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                        s4 = peg$c0;
                                                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                                                      } else {
                                                                                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                                                                                        s4 = null;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                                                                      s0 = peg$f109(s1);
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                      peg$currPos = s0;
                                                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                                                                      s1 = peg$parsesev_inst();
                                                                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                                                                        s2 = [];
                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                                                                                          s2.push(s3);
                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                        }
                                                                                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                                                                                          s3 = null;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                          s4 = peg$c0;
                                                                                                                                                                                                          peg$currPos++;
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                                                                                          s4 = null;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                                                                        s0 = peg$f110(s1);
                                                                                                                                                                                                      } else {
                                                                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                        s0 = peg$currPos;
                                                                                                                                                                                                        s1 = peg$parsesevl_inst();
                                                                                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                                                                                          s2 = [];
                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                                                                                                            s2.push(s3);
                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                          }
                                                                                                                                                                                                          s3 = peg$parsecomment();
                                                                                                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                                                                                                            s3 = null;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                            s4 = peg$c0;
                                                                                                                                                                                                            peg$currPos++;
                                                                                                                                                                                                          } else {
                                                                                                                                                                                                            s4 = peg$FAILED;
                                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                                                                                                            s4 = null;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          peg$savedPos = s0;
                                                                                                                                                                                                          s0 = peg$f111(s1);
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                          peg$currPos = s0;
                                                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                          s0 = peg$currPos;
                                                                                                                                                                                                          s1 = peg$parsesmaddl_inst();
                                                                                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                                                                                            s2 = [];
                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                                                                                                              s2.push(s3);
                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                            }
                                                                                                                                                                                                            s3 = peg$parsecomment();
                                                                                                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                                                                                                              s3 = null;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                              s4 = peg$c0;
                                                                                                                                                                                                              peg$currPos++;
                                                                                                                                                                                                            } else {
                                                                                                                                                                                                              s4 = peg$FAILED;
                                                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                                                                                                              s4 = null;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            peg$savedPos = s0;
                                                                                                                                                                                                            s0 = peg$f112(s1);
                                                                                                                                                                                                          } else {
                                                                                                                                                                                                            peg$currPos = s0;
                                                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                            s0 = peg$currPos;
                                                                                                                                                                                                            s1 = peg$parsesmc_inst();
                                                                                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                                                                                              s2 = [];
                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                s2.push(s3);
                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                              }
                                                                                                                                                                                                              s3 = peg$parsecomment();
                                                                                                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                                                                                                s3 = null;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                s4 = peg$c0;
                                                                                                                                                                                                                peg$currPos++;
                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                s4 = peg$FAILED;
                                                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                                                                                                s4 = null;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              peg$savedPos = s0;
                                                                                                                                                                                                              s0 = peg$f113(s1);
                                                                                                                                                                                                            } else {
                                                                                                                                                                                                              peg$currPos = s0;
                                                                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                              s0 = peg$currPos;
                                                                                                                                                                                                              s1 = peg$parsesmnegl_inst();
                                                                                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                s2 = [];
                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                  s2.push(s3);
                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                }
                                                                                                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                                                                                                  s3 = null;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                  s4 = peg$c0;
                                                                                                                                                                                                                  peg$currPos++;
                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                                                                                                  s4 = null;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                                                                                s0 = peg$f114(s1);
                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                peg$currPos = s0;
                                                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                                                                                s1 = peg$parsesmsubl_inst();
                                                                                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                  s2 = [];
                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                    s2.push(s3);
                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                                                                                                    s3 = null;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                    s4 = peg$c0;
                                                                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                                                                                                    s4 = null;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                                                                                  s0 = peg$f115(s1);
                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                  peg$currPos = s0;
                                                                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                                                                                  s1 = peg$parsesmulh_inst();
                                                                                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                    s2 = [];
                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                      s2.push(s3);
                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                                                                                                      s3 = null;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                      s4 = peg$c0;
                                                                                                                                                                                                                      peg$currPos++;
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                                                                                                      s4 = null;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                                                                                    s0 = peg$f116(s1);
                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                                                                                    s1 = peg$parsesmull_inst();
                                                                                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                      s2 = [];
                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                        s2.push(s3);
                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                                                                                                        s3 = null;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                        s4 = peg$c0;
                                                                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                                                                                                        s4 = null;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                                                                                      s0 = peg$f117(s1);
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                      peg$currPos = s0;
                                                                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                                                                                      s1 = peg$parsestaobh_inst();
                                                                                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                        s2 = [];
                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                          s2.push(s3);
                                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                                                                                                          s3 = null;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                          s4 = peg$c0;
                                                                                                                                                                                                                          peg$currPos++;
                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                                                                                                          s4 = null;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                                                                                        s0 = peg$f118(s1);
                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                        s0 = peg$currPos;
                                                                                                                                                                                                                        s1 = peg$parsestao_inst();
                                                                                                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                          s2 = [];
                                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                            s2.push(s3);
                                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          s3 = peg$parsecomment();
                                                                                                                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                                                                                                                            s3 = null;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                            s4 = peg$c0;
                                                                                                                                                                                                                            peg$currPos++;
                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                            s4 = peg$FAILED;
                                                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                                                                                                                            s4 = null;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          peg$savedPos = s0;
                                                                                                                                                                                                                          s0 = peg$f119(s1);
                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                          peg$currPos = s0;
                                                                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                          s0 = peg$currPos;
                                                                                                                                                                                                                          s1 = peg$parsestlxrbh_inst();
                                                                                                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                            s2 = [];
                                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                              s2.push(s3);
                                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            s3 = peg$parsecomment();
                                                                                                                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                                                                                                                              s3 = null;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                              s4 = peg$c0;
                                                                                                                                                                                                                              peg$currPos++;
                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                              s4 = peg$FAILED;
                                                                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                                                                                                                              s4 = null;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            peg$savedPos = s0;
                                                                                                                                                                                                                            s0 = peg$f120(s1);
                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                            peg$currPos = s0;
                                                                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                            s0 = peg$currPos;
                                                                                                                                                                                                                            s1 = peg$parsestlxr_inst();
                                                                                                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                              s2 = [];
                                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                s2.push(s3);
                                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              s3 = peg$parsecomment();
                                                                                                                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                s3 = null;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                s4 = peg$c0;
                                                                                                                                                                                                                                peg$currPos++;
                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                s4 = peg$FAILED;
                                                                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                s4 = null;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              peg$savedPos = s0;
                                                                                                                                                                                                                              s0 = peg$f121(s1);
                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                              peg$currPos = s0;
                                                                                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                              s0 = peg$currPos;
                                                                                                                                                                                                                              s1 = peg$parsestlxp_inst();
                                                                                                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                s2 = [];
                                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                  s2.push(s3);
                                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                  s3 = null;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                  s4 = peg$c0;
                                                                                                                                                                                                                                  peg$currPos++;
                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                  s4 = null;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                                                                                                s0 = peg$f122(s1);
                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                peg$currPos = s0;
                                                                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                                                                                                s1 = peg$parsestlrbh_inst();
                                                                                                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                  s2 = [];
                                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                    s2.push(s3);
                                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                    s3 = null;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                    s4 = peg$c0;
                                                                                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                    s4 = null;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                                                                                                  s0 = peg$f123(s1);
                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                  peg$currPos = s0;
                                                                                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                                                                                                  s1 = peg$parsestlr_inst();
                                                                                                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                    s2 = [];
                                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                      s2.push(s3);
                                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                      s3 = null;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                      s4 = peg$c0;
                                                                                                                                                                                                                                      peg$currPos++;
                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                      s4 = null;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                                                                                                    s0 = peg$f124(s1);
                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                                                                                                    s1 = peg$parsesturbh_inst();
                                                                                                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                      s2 = [];
                                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                        s2.push(s3);
                                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                        s3 = null;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                        s4 = peg$c0;
                                                                                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                        s4 = null;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                                                                                                      s0 = peg$f125(s1);
                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                      peg$currPos = s0;
                                                                                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                                                                                                      s1 = peg$parsestur_inst();
                                                                                                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                        s2 = [];
                                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                          s2.push(s3);
                                                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                          s3 = null;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                          s4 = peg$c0;
                                                                                                                                                                                                                                          peg$currPos++;
                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                          s4 = null;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                                                                                                        s0 = peg$f126(s1);
                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                        s0 = peg$currPos;
                                                                                                                                                                                                                                        s1 = peg$parsesttrbh_inst();
                                                                                                                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                          s2 = [];
                                                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                            s2.push(s3);
                                                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          s3 = peg$parsecomment();
                                                                                                                                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                            s3 = null;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                            s4 = peg$c0;
                                                                                                                                                                                                                                            peg$currPos++;
                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                            s4 = peg$FAILED;
                                                                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                            s4 = null;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          peg$savedPos = s0;
                                                                                                                                                                                                                                          s0 = peg$f127(s1);
                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                          peg$currPos = s0;
                                                                                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                          s0 = peg$currPos;
                                                                                                                                                                                                                                          s1 = peg$parsesttr_inst();
                                                                                                                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                            s2 = [];
                                                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                              s2.push(s3);
                                                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            s3 = peg$parsecomment();
                                                                                                                                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                              s3 = null;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                              s4 = peg$c0;
                                                                                                                                                                                                                                              peg$currPos++;
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                              s4 = peg$FAILED;
                                                                                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                              s4 = null;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            peg$savedPos = s0;
                                                                                                                                                                                                                                            s0 = peg$f128(s1);
                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                            peg$currPos = s0;
                                                                                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                            s0 = peg$currPos;
                                                                                                                                                                                                                                            s1 = peg$parsestnp_inst();
                                                                                                                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                              s2 = [];
                                                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                s2.push(s3);
                                                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              s3 = peg$parsecomment();
                                                                                                                                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                s3 = null;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                s4 = peg$c0;
                                                                                                                                                                                                                                                peg$currPos++;
                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                s4 = peg$FAILED;
                                                                                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                s4 = null;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              peg$savedPos = s0;
                                                                                                                                                                                                                                              s0 = peg$f129(s1);
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                              peg$currPos = s0;
                                                                                                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                              s0 = peg$currPos;
                                                                                                                                                                                                                                              s1 = peg$parsestp_inst();
                                                                                                                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                s2 = [];
                                                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                  s2.push(s3);
                                                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                  s3 = null;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                  s4 = peg$c0;
                                                                                                                                                                                                                                                  peg$currPos++;
                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                  s4 = null;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                                                                                                                s0 = peg$f130(s1);
                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                peg$currPos = s0;
                                                                                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                                                                                                                s1 = peg$parsesvc_inst();
                                                                                                                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                  s2 = [];
                                                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                    s2.push(s3);
                                                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                    s3 = null;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                    s4 = peg$c0;
                                                                                                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                    s4 = null;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                                                                                                                  s0 = peg$f131(s1);
                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                  peg$currPos = s0;
                                                                                                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                                                                                                                  s1 = peg$parsesusxtbh_inst();
                                                                                                                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                    s2 = [];
                                                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                      s2.push(s3);
                                                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                      s3 = null;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                      s4 = peg$c0;
                                                                                                                                                                                                                                                      peg$currPos++;
                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                      s4 = null;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                                                                                                                    s0 = peg$f132(s1);
                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                                                                                                                    s1 = peg$parsesxtw_inst();
                                                                                                                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                      s2 = [];
                                                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                        s2.push(s3);
                                                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                        s3 = null;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                        s4 = peg$c0;
                                                                                                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                        s4 = null;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                                                                                                                      s0 = peg$f133(s1);
                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                      peg$currPos = s0;
                                                                                                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                                                                                                                      s1 = peg$parseswpbh_inst();
                                                                                                                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                        s2 = [];
                                                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                          s2.push(s3);
                                                                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                          s3 = null;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                          s4 = peg$c0;
                                                                                                                                                                                                                                                          peg$currPos++;
                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                          s4 = null;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                                                                                                                        s0 = peg$f134(s1);
                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                        s0 = peg$currPos;
                                                                                                                                                                                                                                                        s1 = peg$parseswp_inst();
                                                                                                                                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                          s2 = [];
                                                                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                            s2.push(s3);
                                                                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          s3 = peg$parsecomment();
                                                                                                                                                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                            s3 = null;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                            s4 = peg$c0;
                                                                                                                                                                                                                                                            peg$currPos++;
                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                            s4 = peg$FAILED;
                                                                                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                            s4 = null;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          peg$savedPos = s0;
                                                                                                                                                                                                                                                          s0 = peg$f135(s1);
                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                          peg$currPos = s0;
                                                                                                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                          s0 = peg$currPos;
                                                                                                                                                                                                                                                          s1 = peg$parsetbnz_inst();
                                                                                                                                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                            s2 = [];
                                                                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                              s2.push(s3);
                                                                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            s3 = peg$parsecomment();
                                                                                                                                                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                              s3 = null;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                              s4 = peg$c0;
                                                                                                                                                                                                                                                              peg$currPos++;
                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                              s4 = peg$FAILED;
                                                                                                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                              s4 = null;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            peg$savedPos = s0;
                                                                                                                                                                                                                                                            s0 = peg$f136(s1);
                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                            peg$currPos = s0;
                                                                                                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                            s0 = peg$currPos;
                                                                                                                                                                                                                                                            s1 = peg$parsetbz_inst();
                                                                                                                                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                              s2 = [];
                                                                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                s2.push(s3);
                                                                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              s3 = peg$parsecomment();
                                                                                                                                                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                s3 = null;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                s4 = peg$c0;
                                                                                                                                                                                                                                                                peg$currPos++;
                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                s4 = peg$FAILED;
                                                                                                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                s4 = null;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              peg$savedPos = s0;
                                                                                                                                                                                                                                                              s0 = peg$f137(s1);
                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                              peg$currPos = s0;
                                                                                                                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                              s0 = peg$currPos;
                                                                                                                                                                                                                                                              s1 = peg$parsetst_inst();
                                                                                                                                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                s2 = [];
                                                                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                  s2.push(s3);
                                                                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s3 = null;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                  s4 = peg$c0;
                                                                                                                                                                                                                                                                  peg$currPos++;
                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s4 = null;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                                                                                                                                s0 = peg$f138(s1);
                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                peg$currPos = s0;
                                                                                                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                                                                                                                                s1 = peg$parseudiv_inst();
                                                                                                                                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                  s2 = [];
                                                                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                    s2.push(s3);
                                                                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s3 = null;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                    s4 = peg$c0;
                                                                                                                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s4 = null;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                                                                                                                                  s0 = peg$f139(s1);
                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                  peg$currPos = s0;
                                                                                                                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                                                                                                                                  s1 = peg$parseumaddl_inst();
                                                                                                                                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                    s2 = [];
                                                                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                      s2.push(s3);
                                                                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s3 = null;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                      s4 = peg$c0;
                                                                                                                                                                                                                                                                      peg$currPos++;
                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s4 = null;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                                                                                                                                    s0 = peg$f140(s1);
                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                                                                                                                                    s1 = peg$parseumnegl_inst();
                                                                                                                                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                      s2 = [];
                                                                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                        s2.push(s3);
                                                                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s3 = null;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                        s4 = peg$c0;
                                                                                                                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s4 = null;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                                                                                                                                      s0 = peg$f141(s1);
                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                      peg$currPos = s0;
                                                                                                                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                                                                                                                                      s1 = peg$parseumsubl_inst();
                                                                                                                                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                        s2 = [];
                                                                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                          s2.push(s3);
                                                                                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s3 = null;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                          s4 = peg$c0;
                                                                                                                                                                                                                                                                          peg$currPos++;
                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s4 = null;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                                                                                                                                        s0 = peg$f142(s1);
                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s0 = peg$currPos;
                                                                                                                                                                                                                                                                        s1 = peg$parseumulh_inst();
                                                                                                                                                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                          s2 = [];
                                                                                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                                                                                          while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                            s2.push(s3);
                                                                                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                          if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s3 = null;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                            s4 = peg$c0;
                                                                                                                                                                                                                                                                            peg$currPos++;
                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                            s4 = peg$FAILED;
                                                                                                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s4 = null;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          peg$savedPos = s0;
                                                                                                                                                                                                                                                                          s0 = peg$f143(s1);
                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                          peg$currPos = s0;
                                                                                                                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s0 = peg$currPos;
                                                                                                                                                                                                                                                                          s1 = peg$parseumull_inst();
                                                                                                                                                                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                            s2 = [];
                                                                                                                                                                                                                                                                            s3 = peg$parse_();
                                                                                                                                                                                                                                                                            while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                              s2.push(s3);
                                                                                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                            if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s3 = null;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                              s4 = peg$c0;
                                                                                                                                                                                                                                                                              peg$currPos++;
                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                              s4 = peg$FAILED;
                                                                                                                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s4 = null;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            peg$savedPos = s0;
                                                                                                                                                                                                                                                                            s0 = peg$f144(s1);
                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                            peg$currPos = s0;
                                                                                                                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s0 = peg$currPos;
                                                                                                                                                                                                                                                                            s1 = peg$parsewfe_inst();
                                                                                                                                                                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                              s2 = [];
                                                                                                                                                                                                                                                                              s3 = peg$parse_();
                                                                                                                                                                                                                                                                              while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                s2.push(s3);
                                                                                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                              if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s3 = null;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                                s4 = peg$c0;
                                                                                                                                                                                                                                                                                peg$currPos++;
                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                s4 = peg$FAILED;
                                                                                                                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s4 = null;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              peg$savedPos = s0;
                                                                                                                                                                                                                                                                              s0 = peg$f145(s1);
                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                              peg$currPos = s0;
                                                                                                                                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s0 = peg$currPos;
                                                                                                                                                                                                                                                                              s1 = peg$parsewfi_inst();
                                                                                                                                                                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                s2 = [];
                                                                                                                                                                                                                                                                                s3 = peg$parse_();
                                                                                                                                                                                                                                                                                while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                  s2.push(s3);
                                                                                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                                if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s3 = null;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                                  s4 = peg$c0;
                                                                                                                                                                                                                                                                                  peg$currPos++;
                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                  s4 = peg$FAILED;
                                                                                                                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s4 = null;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                peg$savedPos = s0;
                                                                                                                                                                                                                                                                                s0 = peg$f146(s1);
                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                peg$currPos = s0;
                                                                                                                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s0 = peg$currPos;
                                                                                                                                                                                                                                                                                s1 = peg$parseyield_inst();
                                                                                                                                                                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                  s2 = [];
                                                                                                                                                                                                                                                                                  s3 = peg$parse_();
                                                                                                                                                                                                                                                                                  while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                    s2.push(s3);
                                                                                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                                  if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s3 = null;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                                    s4 = peg$c0;
                                                                                                                                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                    s4 = peg$FAILED;
                                                                                                                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s4 = null;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  peg$savedPos = s0;
                                                                                                                                                                                                                                                                                  s0 = peg$f147(s1);
                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                  peg$currPos = s0;
                                                                                                                                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s0 = peg$currPos;
                                                                                                                                                                                                                                                                                  s1 = peg$parsesubfiz_inst();
                                                                                                                                                                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                    s2 = [];
                                                                                                                                                                                                                                                                                    s3 = peg$parse_();
                                                                                                                                                                                                                                                                                    while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                      s2.push(s3);
                                                                                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                                    if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s3 = null;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                                      s4 = peg$c0;
                                                                                                                                                                                                                                                                                      peg$currPos++;
                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                      s4 = peg$FAILED;
                                                                                                                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s4 = null;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    peg$savedPos = s0;
                                                                                                                                                                                                                                                                                    s0 = peg$f148(s1);
                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s0 = peg$currPos;
                                                                                                                                                                                                                                                                                    s1 = peg$parsesubfx_inst();
                                                                                                                                                                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                      s2 = [];
                                                                                                                                                                                                                                                                                      s3 = peg$parse_();
                                                                                                                                                                                                                                                                                      while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                        s2.push(s3);
                                                                                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                                      if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                                        s3 = null;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                                        s4 = peg$c0;
                                                                                                                                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                        s4 = peg$FAILED;
                                                                                                                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                                        s4 = null;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      peg$savedPos = s0;
                                                                                                                                                                                                                                                                                      s0 = peg$f149(s1);
                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                      peg$currPos = s0;
                                                                                                                                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s0 = peg$currPos;
                                                                                                                                                                                                                                                                                      s1 = peg$parsesub_inst();
                                                                                                                                                                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                        s2 = [];
                                                                                                                                                                                                                                                                                        s3 = peg$parse_();
                                                                                                                                                                                                                                                                                        while (s3 !== peg$FAILED) {
                                                                                                                                                                                                                                                                                          s2.push(s3);
                                                                                                                                                                                                                                                                                          s3 = peg$parse_();
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        s3 = peg$parsecomment();
                                                                                                                                                                                                                                                                                        if (s3 === peg$FAILED) {
                                                                                                                                                                                                                                                                                          s3 = null;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 10) {
                                                                                                                                                                                                                                                                                          s4 = peg$c0;
                                                                                                                                                                                                                                                                                          peg$currPos++;
                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                          s4 = peg$FAILED;
                                                                                                                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                                                                                                                                                                                          s4 = null;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        peg$savedPos = s0;
                                                                                                                                                                                                                                                                                        s0 = peg$f150(s1);
                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseadc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseADC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f151(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseADC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f152(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseADC() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c35) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c36) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f153();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadd_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseADD();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseop2_arithmetic();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers64();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parseimm();
                  }
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f154(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseADD();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseop2_arithmetic();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsers32();
                    if (s11 === peg$FAILED) {
                      s11 = peg$parseimm();
                    }
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f155(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseADD() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c37) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c36) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f156();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseADR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parserel();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f157(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseADR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c38) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f158(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadrp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseADRP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parserel();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f159(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseADRP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c39) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f160(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecmn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCMN();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseop2_arithmetic();
            if (s9 === peg$FAILED) {
              s9 = peg$parsers64();
              if (s9 === peg$FAILED) {
                s9 = peg$parseimm();
              }
            }
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f161(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCMN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseop2_arithmetic();
              if (s9 === peg$FAILED) {
                s9 = peg$parsers32();
                if (s9 === peg$FAILED) {
                  s9 = peg$parseimm();
                }
              }
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f162(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCMN() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c40) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f163(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecmp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCMP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseop2_arithmetic();
            if (s9 === peg$FAILED) {
              s9 = peg$parsers64();
              if (s9 === peg$FAILED) {
                s9 = peg$parseimm();
              }
            }
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f164(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCMP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseop2_arithmetic();
              if (s9 === peg$FAILED) {
                s9 = peg$parsers32();
                if (s9 === peg$FAILED) {
                  s9 = peg$parseimm();
                }
              }
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f165(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCMP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c41) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f166(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemadd_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMADD();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsers64();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f167(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMADD();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsers32();
                      if (s13 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f168(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMADD() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c42) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f169(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemneg_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMNEG();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsers64();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f170(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMNEG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsers32();
                      if (s13 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f171(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMNEG() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c43) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f172(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemsub_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMSUB();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsers64();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f173(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMSUB();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsers32();
                      if (s13 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f174(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMSUB() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c44) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f175(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemul_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMUL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f176(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMUL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f177(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMUL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c45) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f178(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseneg_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseNEG();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseop2_arithmetic();
            if (s9 === peg$FAILED) {
              s9 = peg$parsers64();
              if (s9 === peg$FAILED) {
                s9 = peg$parseimm();
              }
            }
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f179(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseNEG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseop2_arithmetic();
              if (s9 === peg$FAILED) {
                s9 = peg$parsers32();
                if (s9 === peg$FAILED) {
                  s9 = peg$parseimm();
                }
              }
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f180(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseNEG() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c46) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c36) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f181();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsengc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseNGC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f182(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseNGC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f183(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseNGC() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c47) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c36) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f184();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesbc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSBC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f185(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseSBC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f186(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSBC() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c48) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c36) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f187();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesdiv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSDIV();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f188(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseSDIV();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f189(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSDIV() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c49) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f190(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmaddl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSMADDL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsers64();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f191(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSMADDL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c50) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f192(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmnegl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSMNEGL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f193(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSMNEGL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c51) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f194(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmsubl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSMSUBL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsers64();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f195(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSMSUBL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c52) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f196(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmulh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSMULH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f197(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSMULH() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c53) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f198(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmull_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSMULL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f199(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSMULL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c54) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f200(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesub_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSUB();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseop2_arithmetic();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers64();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parseimm();
                  }
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f201(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseSUB();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseop2_arithmetic();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsers32();
                    if (s11 === peg$FAILED) {
                      s11 = peg$parseimm();
                    }
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f202(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSUB() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c55) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c36) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f203();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseudiv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseUDIV();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f204(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseUDIV();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f205(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseUDIV() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c56) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f206(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumaddl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseUMADDL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsers64();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f207(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUMADDL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c57) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f208(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumnegl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseUMNEGL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f209(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUMNEGL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c58) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f210(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumsubl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseUMSUBL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsers64();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f211(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUMSUBL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c59) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f212(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumulh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseUMULH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f213(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUMULH() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c60) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f214(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumull_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseUMULL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f215(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUMULL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c61) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f216(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebfi_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseBFI();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseimm();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parseimm();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f217(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseBFI();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseimm();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseimm();
                      if (s13 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f218(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBFI() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c62) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f219(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebfxil_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseBFXIL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseimm();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parseimm();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f220(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseBFXIL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseimm();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseimm();
                      if (s13 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f221(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBFXIL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c63) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f222(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecls_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCLS();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f223(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCLS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f224(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCLS() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c64) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f225(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseclz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCLZ();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f226(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCLZ();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f227(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCLZ() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c65) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f228(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseextr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseEXTR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parseimm();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f229(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseEXTR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseimm();
                      if (s13 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f230(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEXTR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c66) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f231(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserbit_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseRBIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f232(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseRBIT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f233(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseRBIT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c67) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f234(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserev_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseREV();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f235(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseREV();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f236(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseREV() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c68) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f237(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserev16_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseREV16();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f238(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseREV16();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f239(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseREV16() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c69) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f240(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserev32_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseREV32();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f241(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREV32() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c70) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f242(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubfiz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSUBFIZ();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseimm();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parseimm();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f243(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseSUBFIZ();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseimm();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseimm();
                      if (s13 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f244(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSUBFIZ() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.substr(peg$currPos, 4);
      if (s3.toLowerCase() === peg$c71) {
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f245();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubfx_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSUBFX();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseimm();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parseimm();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f246(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseSUBFX();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseimm();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseimm();
                      if (s13 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f247(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSUBFX() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.substr(peg$currPos, 3);
      if (s3.toLowerCase() === peg$c72) {
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e73); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f248();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesusxtbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSUSXTBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f249(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSUSXTBH() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.substr(peg$currPos, 2);
      if (s3.toLowerCase() === peg$c73) {
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
      if (s3 !== peg$FAILED) {
        s4 = input.charAt(peg$currPos);
        if (peg$r1.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f250();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesxtw_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSXTW();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f251(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSXTW() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c74) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f252(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseand_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseAND();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseop2_logic();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers64();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsemask();
                  }
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f253(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseAND();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseop2_logic();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsers32();
                    if (s11 === peg$FAILED) {
                      s11 = peg$parsemask();
                    }
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f254(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseAND() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c75) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c36) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f255();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseasr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseASR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 === peg$FAILED) {
                  s11 = peg$parseimm();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f256(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseASR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parseimm();
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f257(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseASR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c76) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f258(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebic_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseBIC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseop2_logic();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers64();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f259(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseBIC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseop2_logic();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsers32();
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f260(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBIC() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c77) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c36) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f261();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseeon_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseEON();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseop2_logic();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers64();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f262(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseEON();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseop2_logic();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsers32();
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f263(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEON() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c78) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f264(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseeor_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseEOR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseop2_logic();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers64();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsemask();
                  }
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f265(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseEOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseop2_logic();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsers32();
                    if (s11 === peg$FAILED) {
                      s11 = peg$parsemask();
                    }
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f266(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEOR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c79) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f267(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselsl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLSL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 === peg$FAILED) {
                  s11 = peg$parseimm();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f268(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLSL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parseimm();
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f269(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLSL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c80) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f270(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselsr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLSR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 === peg$FAILED) {
                  s11 = peg$parseimm();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f271(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLSR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parseimm();
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f272(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLSR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c81) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f273(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemov_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMOV();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 === peg$FAILED) {
              s9 = peg$parseimm();
            }
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f274(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMOV();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 === peg$FAILED) {
                s9 = peg$parseimm();
              }
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f275(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMOV() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c82) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f276(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemovk_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMOVK();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseimm();
            if (s9 !== peg$FAILED) {
              s10 = peg$currPos;
              s11 = peg$parsecomma();
              if (s11 !== peg$FAILED) {
                s12 = peg$parsesh();
                if (s12 !== peg$FAILED) {
                  s11 = [s11, s12];
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f277(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMOVK();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseimm();
              if (s9 !== peg$FAILED) {
                s10 = peg$currPos;
                s11 = peg$parsecomma();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsesh();
                  if (s12 !== peg$FAILED) {
                    s11 = [s11, s12];
                    s10 = s11;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                s7 = [s7, s8, s9, s10];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f278(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMOVK() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c83) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f279(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemovn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMOVN();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseimm();
            if (s9 !== peg$FAILED) {
              s10 = peg$currPos;
              s11 = peg$parsecomma();
              if (s11 !== peg$FAILED) {
                s12 = peg$parsesh();
                if (s12 !== peg$FAILED) {
                  s11 = [s11, s12];
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f280(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMOVN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseimm();
              if (s9 !== peg$FAILED) {
                s10 = peg$currPos;
                s11 = peg$parsecomma();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsesh();
                  if (s12 !== peg$FAILED) {
                    s11 = [s11, s12];
                    s10 = s11;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                s7 = [s7, s8, s9, s10];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f281(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMOVN() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c84) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f282(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemovz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMOVZ();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseimm();
            if (s9 !== peg$FAILED) {
              s10 = peg$currPos;
              s11 = peg$parsecomma();
              if (s11 !== peg$FAILED) {
                s12 = peg$parsesh();
                if (s12 !== peg$FAILED) {
                  s11 = [s11, s12];
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f283(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMOVZ();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseimm();
              if (s9 !== peg$FAILED) {
                s10 = peg$currPos;
                s11 = peg$parsecomma();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsesh();
                  if (s12 !== peg$FAILED) {
                    s11 = [s11, s12];
                    s10 = s11;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                s7 = [s7, s8, s9, s10];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f284(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMOVZ() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c85) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f285(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemvn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMVN();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsers64();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseop2_logic();
            if (s8 === peg$FAILED) {
              s8 = peg$parsers64();
            }
            if (s8 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMVN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseop2_logic();
              if (s9 === peg$FAILED) {
                s9 = peg$parsers32();
              }
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f286(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMVN() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c86) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f287(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseORN();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseop2_logic();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers64();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f288(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseORN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseop2_logic();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsers32();
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f289(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseORN() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c87) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f290(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseORR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseop2_logic();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers64();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsemask();
                  }
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f291(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseORR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseop2_logic();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parsers32();
                    if (s11 === peg$FAILED) {
                      s11 = peg$parsemask();
                    }
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f292(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseORR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c88) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f293(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseror_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseROR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 === peg$FAILED) {
                  s11 = peg$parseimm();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f294(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseROR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parseimm();
                  }
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f295(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseROR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c89) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f296(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetst_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseTST();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseop2_logic();
            if (s9 === peg$FAILED) {
              s9 = peg$parsers64();
              if (s9 === peg$FAILED) {
                s9 = peg$parsemask();
              }
            }
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f297(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseTST();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseop2_logic();
              if (s9 === peg$FAILED) {
                s9 = peg$parsers32();
                if (s9 === peg$FAILED) {
                  s9 = peg$parsemask();
                }
              }
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f298(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseTST() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c90) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f299(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseb_inst() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseB();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parserel();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f300(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseB() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c91) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f301(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebcc_inst() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseBCC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parserel();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f302(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBCC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c92) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f303(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebl_inst() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseBL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parserel();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f304(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c93) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f305(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseblr_inst() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseBLR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsers64();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f306(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseBLR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsers32();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f307(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBLR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c94) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f308(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebr_inst() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseBR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsers64();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f309(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseBR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsers32();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f310(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c95) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f311(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecbnz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCBNZ();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parserel();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f312(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCBNZ();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parserel();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f313(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCBNZ() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c96) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f314(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecbz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCBZ();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parserel();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f315(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCBZ();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parserel();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f316(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCBZ() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c97) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f317(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseret_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseRET();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$currPos;
      s6 = peg$parse_();
      if (s6 !== peg$FAILED) {
        s7 = peg$parsers64();
        if (s7 === peg$FAILED) {
          s7 = peg$parsers32();
        }
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f318(s2, s3, s4, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRET() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c98) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f319(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetbnz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseTBNZ();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseimm();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parserel();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f320(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseTBNZ();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseimm();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parserel();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f321(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseTBNZ() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c99) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f322(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetbz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseTBZ();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseimm();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parserel();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f323(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseTBZ();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseimm();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parserel();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f324(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseTBZ() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c100) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f325(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseccmn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCCMN();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 === peg$FAILED) {
              s9 = peg$parseimm();
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseimm();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = [];
                    s14 = peg$parse_();
                    while (s14 !== peg$FAILED) {
                      s13.push(s14);
                      s14 = peg$parse_();
                    }
                    s14 = peg$parsecc();
                    if (s14 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f326(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCCMN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 === peg$FAILED) {
                s9 = peg$parseimm();
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseimm();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = [];
                      s14 = peg$parse_();
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = peg$parse_();
                      }
                      s14 = peg$parsecc();
                      if (s14 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f327(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCCMN() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c101) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f328(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseccmp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCCMP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 === peg$FAILED) {
              s9 = peg$parseimm();
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseimm();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = [];
                    s14 = peg$parse_();
                    while (s14 !== peg$FAILED) {
                      s13.push(s14);
                      s14 = peg$parse_();
                    }
                    s14 = peg$parsecc();
                    if (s14 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f329(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCCMP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 === peg$FAILED) {
                s9 = peg$parseimm();
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseimm();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = [];
                      s14 = peg$parse_();
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = peg$parse_();
                      }
                      s14 = peg$parsecc();
                      if (s14 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f330(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCCMP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c102) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f331(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecinc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCINC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parsecc();
                if (s12 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11, s12];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f332(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCINC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = [];
                  s12 = peg$parse_();
                  while (s12 !== peg$FAILED) {
                    s11.push(s12);
                    s12 = peg$parse_();
                  }
                  s12 = peg$parsecc();
                  if (s12 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11, s12];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f333(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCINC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c103) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f334(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecinv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCINV();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parsecc();
                if (s12 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11, s12];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f335(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCINV();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = [];
                  s12 = peg$parse_();
                  while (s12 !== peg$FAILED) {
                    s11.push(s12);
                    s12 = peg$parse_();
                  }
                  s12 = peg$parsecc();
                  if (s12 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11, s12];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f336(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCINV() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c104) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f337(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecneg_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCNEG();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parsecc();
                if (s12 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11, s12];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f338(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCNEG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = [];
                  s12 = peg$parse_();
                  while (s12 !== peg$FAILED) {
                    s11.push(s12);
                    s12 = peg$parse_();
                  }
                  s12 = peg$parsecc();
                  if (s12 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11, s12];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f339(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCNEG() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c105) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f340(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecsel_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCSEL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = [];
                    s14 = peg$parse_();
                    while (s14 !== peg$FAILED) {
                      s13.push(s14);
                      s14 = peg$parse_();
                    }
                    s14 = peg$parsecc();
                    if (s14 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f341(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCSEL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = [];
                      s14 = peg$parse_();
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = peg$parse_();
                      }
                      s14 = peg$parsecc();
                      if (s14 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f342(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCSEL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c106) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f343(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecset_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCSET();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecc();
            if (s10 !== peg$FAILED) {
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f344(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCSET();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecc();
              if (s10 !== peg$FAILED) {
                s7 = [s7, s8, s9, s10];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f345(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCSET() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c107) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f346(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecsetm_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCSETM();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecc();
            if (s10 !== peg$FAILED) {
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f347(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCSETM();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecc();
              if (s10 !== peg$FAILED) {
                s7 = [s7, s8, s9, s10];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f348(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCSETM() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c108) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f349(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecsinc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCSINC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = [];
                    s14 = peg$parse_();
                    while (s14 !== peg$FAILED) {
                      s13.push(s14);
                      s14 = peg$parse_();
                    }
                    s14 = peg$parsecc();
                    if (s14 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f350(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCSINC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = [];
                      s14 = peg$parse_();
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = peg$parse_();
                      }
                      s14 = peg$parsecc();
                      if (s14 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f351(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCSINC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c109) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f352(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecsinv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCSINV();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = [];
                    s14 = peg$parse_();
                    while (s14 !== peg$FAILED) {
                      s13.push(s14);
                      s14 = peg$parse_();
                    }
                    s14 = peg$parsecc();
                    if (s14 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f353(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCSINV();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = [];
                      s14 = peg$parse_();
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = peg$parse_();
                      }
                      s14 = peg$parsecc();
                      if (s14 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f354(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCSINV() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c110) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f355(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecsneg_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCSNEG();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = [];
                    s14 = peg$parse_();
                    while (s14 !== peg$FAILED) {
                      s13.push(s14);
                      s14 = peg$parse_();
                    }
                    s14 = peg$parsecc();
                    if (s14 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f356(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCSNEG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = [];
                      s14 = peg$parse_();
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = peg$parse_();
                      }
                      s14 = peg$parsecc();
                      if (s14 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13, s14];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f357(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCSNEG() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c111) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f358(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseaddr();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f359(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLDP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseaddr();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f360(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLDP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c112) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f361(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldpsw_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDPSW();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseaddr();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f362(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLDPSW();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseaddr();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f363(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLDPSW() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c113) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f364(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldur_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDUR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f365(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLDUR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseaddr();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f366(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLDUR() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c114) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c115) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e117); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c116) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f367();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldurbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDURBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f368(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLDURBH();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseaddr();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f369(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLDURBH() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c114) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c115) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e117); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c116) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s4 !== peg$FAILED) {
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f370();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldursbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDURSBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f371(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLDURSBH();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseaddr();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f372(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLDURSBH() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c114) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c115) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e117); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.substr(peg$currPos, 2);
      if (s4.toLowerCase() === peg$c117) {
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e119); }
      }
      if (s4 !== peg$FAILED) {
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f373();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldursw_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDURSW();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f374(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLDURSW();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseaddr();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f375(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLDURSW() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c114) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c115) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e117); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.substr(peg$currPos, 3);
      if (s4.toLowerCase() === peg$c118) {
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f376();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprfm_inst() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parsePRFM();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseprfop();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f377(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePRFM() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c119) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f378(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseaddr();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f379(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseSTP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseaddr();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f380(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSTP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c120) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f381(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestur_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTUR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 === peg$FAILED) {
          s7 = peg$parsers32();
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f382(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTUR() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c121) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c115) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e117); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c116) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f383();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesturbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTURBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f384(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseSTURBH();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseaddr();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f385(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSTURBH() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c121) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c115) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e117); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c116) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s4 !== peg$FAILED) {
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f386();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecas_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCAS();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parselbracket();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parsers64();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parserbracket();
                        if (s15 !== peg$FAILED) {
                          s7 = [s7, s8, s9, s10, s11, s12, s13, s14, s15];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f387(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCAS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parselbracket();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parsers64();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parserbracket();
                          if (s15 !== peg$FAILED) {
                            s7 = [s7, s8, s9, s10, s11, s12, s13, s14, s15];
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f388(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCAS() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c122) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f389();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecasbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseCASPBH();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecc();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseq();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parsers32();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsers32();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsers32();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsecomma();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parselbracket();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsers64();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parserbracket();
                        if (s14 !== peg$FAILED) {
                          s6 = [s6, s7, s8, s9, s10, s11, s12, s13, s14];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f390(s1, s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCASPBH() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c125) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f391();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecasp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCASP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsers64();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parsecomma();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parselbracket();
                        if (s15 !== peg$FAILED) {
                          s16 = peg$parsers64();
                          if (s16 !== peg$FAILED) {
                            s17 = peg$parserbracket();
                            if (s17 !== peg$FAILED) {
                              s7 = [s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17];
                              s6 = s7;
                            } else {
                              peg$currPos = s6;
                              s6 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f392(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseCASP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsers32();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parsecomma();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parselbracket();
                          if (s15 !== peg$FAILED) {
                            s16 = peg$parsers64();
                            if (s16 !== peg$FAILED) {
                              s17 = peg$parserbracket();
                              if (s17 !== peg$FAILED) {
                                s7 = [s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17];
                                s6 = s7;
                              } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s6;
                              s6 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f393(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCASP() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.substr(peg$currPos, 3) === peg$c122) {
      s2 = peg$c122;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = input.charAt(peg$currPos);
      if (s5.toLowerCase() === peg$c126) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f394();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldaobh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseLDAOBH();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecc();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseq();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parsers32();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsers32();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parselbracket();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers64();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parserbracket();
                    if (s12 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9, s10, s11, s12];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f395(s1, s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLDAOBH() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c127) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f396();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldao_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseLDAO();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecc();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseq();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parsers64();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsers64();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parselbracket();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers64();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parserbracket();
                    if (s12 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9, s10, s11, s12];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f397(s1, s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLDAO();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecc();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseq();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parsers32();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecomma();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsers32();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsecomma();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parselbracket();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsers64();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parserbracket();
                      if (s12 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9, s10, s11, s12];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f398(s1, s2, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLDAO() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c127) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f399();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestaobh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseSTAOBH();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecc();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseq();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parsers32();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsers32();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parselbracket();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers64();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parserbracket();
                    if (s12 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9, s10, s11, s12];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f400(s1, s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTAOBH() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c128) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f401();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestao_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseSTAO();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecc();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseq();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parsers64();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsers64();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parselbracket();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers64();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parserbracket();
                    if (s12 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9, s10, s11, s12];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f402(s1, s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTAO();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecc();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseq();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parsers32();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecomma();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsers32();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsecomma();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parselbracket();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsers64();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parserbracket();
                      if (s12 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9, s10, s11, s12];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f403(s1, s2, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSTAO() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c128) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f404();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseswpbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseSWPBH();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecc();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseq();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parsers32();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsers32();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsers32();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsecomma();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parselbracket();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsers64();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parserbracket();
                        if (s14 !== peg$FAILED) {
                          s6 = [s6, s7, s8, s9, s10, s11, s12, s13, s14];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f405(s1, s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSWPBH() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c129) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f406();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseswp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseSWP();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecc();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseq();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parsers64();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsers64();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsecomma();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsers64();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsecomma();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parselbracket();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsers64();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parserbracket();
                        if (s14 !== peg$FAILED) {
                          s6 = [s6, s7, s8, s9, s10, s11, s12, s13, s14];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f407(s1, s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSWP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecc();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseq();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parsers32();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecomma();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsers32();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsecomma();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsers32();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsecomma();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parselbracket();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsers64();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parserbracket();
                          if (s14 !== peg$FAILED) {
                            s6 = [s6, s7, s8, s9, s10, s11, s12, s13, s14];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f408(s1, s2, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSWP() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c129) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f409();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaadd_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseAADD();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parselbracket();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsers64();
          if (s8 !== peg$FAILED) {
            s9 = peg$parserbracket();
            if (s9 !== peg$FAILED) {
              s10 = peg$parseplus();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers32();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f410(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAADD() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c37) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f411(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaclr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseACLR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parselbracket();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsers64();
          if (s8 !== peg$FAILED) {
            s9 = peg$parserbracket();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsey();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseneg();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsers64();
                  if (s12 === peg$FAILED) {
                    s12 = peg$parsers32();
                  }
                  if (s12 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11, s12];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f412(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseACLR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c130) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f413(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaeor_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseAEOR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parselbracket();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsers64();
          if (s8 !== peg$FAILED) {
            s9 = peg$parserbracket();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsexor();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers32();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f414(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAEOR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c79) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f415(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaset_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseASET();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parselbracket();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsers64();
          if (s8 !== peg$FAILED) {
            s9 = peg$parserbracket();
            if (s9 !== peg$FAILED) {
              s10 = peg$parseo();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 === peg$FAILED) {
                  s11 = peg$parsers32();
                }
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f416(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseASET() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c26) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f417(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecrc32_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCRC32();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f418(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCRC32() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c131) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f419();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecrc32w_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCRC32W();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f420(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCRC32W() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c132) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f421(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecrc32x_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCRC32X();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f422(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCRC32X() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c133) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f423(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecrc32c_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCRC32C();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f424(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCRC32C() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c134) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e138); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f425();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecrc32cw_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCRC32CW();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers32();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f426(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCRC32CW() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 7);
    if (s2.toLowerCase() === peg$c135) {
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f427(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecrc32cx_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCRC32CX();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f428(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCRC32CX() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 7);
    if (s2.toLowerCase() === peg$c136) {
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f429(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldaxp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDAXP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parselbracket();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsers64();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parserbracket();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f430(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLDAXP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parselbracket();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsers64();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parserbracket();
                      if (s13 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11, s12, s13];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f431(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLDAXP() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c114) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.substr(peg$currPos, 2);
      if (s4.toLowerCase() === peg$c137) {
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e141); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f432();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldaxr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDAXR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 === peg$FAILED) {
          s7 = peg$parsers32();
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parselbracket();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsers64();
              if (s10 !== peg$FAILED) {
                s11 = peg$parserbracket();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f433(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLDAXR() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c114) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c138) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e142); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = input.charAt(peg$currPos);
      if (s5.toLowerCase() === peg$c116) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f434();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldaxrbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDAXRBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parselbracket();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsers64();
              if (s10 !== peg$FAILED) {
                s11 = peg$parserbracket();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f435(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLDAXRBH() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c114) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c123) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c138) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e142); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = input.charAt(peg$currPos);
      if (s5.toLowerCase() === peg$c116) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s5 !== peg$FAILED) {
        s6 = input.charAt(peg$currPos);
        if (peg$r1.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f436();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldnp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDNP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseaddr();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f437(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseLDNP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseaddr();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f438(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLDNP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c139) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f439(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldtr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDTR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 === peg$FAILED) {
          s7 = peg$parsers32();
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f440(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLDTR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c140) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f441(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldtrbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDTRBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f442(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLDTRBH() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c140) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f443();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldtrsbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDTRSBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 === peg$FAILED) {
          s7 = peg$parsers32();
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f444(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLDTRSBH() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c141) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f445();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseldtrsw_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseLDTRSW();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f446(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLDTRSW() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c142) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f447(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestlr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTLR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 === peg$FAILED) {
          s7 = peg$parsers32();
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parselbracket();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsers64();
              if (s10 !== peg$FAILED) {
                s11 = peg$parserbracket();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f448(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTLR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c143) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f449(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestlrbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTLRBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parselbracket();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsers64();
              if (s10 !== peg$FAILED) {
                s11 = peg$parserbracket();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f450(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTLRBH() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c143) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f451();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestlxp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTLXP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsers64();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecomma();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parselbracket();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parsers64();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parserbracket();
                        if (s15 !== peg$FAILED) {
                          s7 = [s7, s8, s9, s10, s11, s12, s13, s14, s15];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f452(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseSTLXP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsers32();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsecomma();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parselbracket();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parsers64();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parserbracket();
                          if (s15 !== peg$FAILED) {
                            s7 = [s7, s8, s9, s10, s11, s12, s13, s14, s15];
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f453(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSTLXP() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c121) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.substr(peg$currPos, 2);
      if (s4.toLowerCase() === peg$c137) {
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e141); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f454();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestlxr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTLXR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 === peg$FAILED) {
              s9 = peg$parsers32();
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parselbracket();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsers64();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parserbracket();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f455(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTLXR() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c121) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.substr(peg$currPos, 2);
      if (s4.toLowerCase() === peg$c144) {
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e148); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f456();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestlxrbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTLXRBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers32();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parselbracket();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsers64();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parserbracket();
                    if (s13 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11, s12, s13];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f457(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTLXRBH() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c121) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c124) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.substr(peg$currPos, 2);
      if (s4.toLowerCase() === peg$c144) {
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e148); }
      }
      if (s4 !== peg$FAILED) {
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f458();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestnp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTNP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsecomma();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseaddr();
                if (s11 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f459(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseSTNP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsers32();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers32();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsecomma();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseaddr();
                  if (s11 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10, s11];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f460(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSTNP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c145) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f461(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesttr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTTR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 === peg$FAILED) {
          s7 = peg$parsers32();
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f462(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTTR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c146) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f463(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesttrbh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSTTRBH();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers32();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseaddr();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f464(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTTRBH() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c146) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f465();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseat_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseAT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parseatsy();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsers64();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f466(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c147) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e151); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f467(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebrk_inst() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseBRK();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseimm();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f468(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBRK() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c148) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f469(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseclrex_inst() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseCLREX();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseimm();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f470(s2, s3, s4, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCLREX() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c149) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f471(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedmb_inst() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseDMB();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsebarrierop();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f472(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDMB() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c150) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f473(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedsb_inst() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseDSB();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsebarrierop();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f474(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDSB() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c151) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f475(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseeret_inst() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseERET();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f476(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseERET() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c152) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f477(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehvc_inst() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseHVC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseimm();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f478(s2, s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHVC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c153) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f479(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseisb_inst() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseISB();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parsesy();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f480(s2, s3, s4, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseISB() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c154) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e158); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f481(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemrs_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMRS();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsers64();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsesysreg();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f482(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMRS() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c155) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f483(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemsr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseMSR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsesysregM();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseimm();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f484(s2, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$parseMSR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecc();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseq();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsesysreg();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsers64();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f485(s2, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMSR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c156) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f486(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenop_inst() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseNOP();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f487(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNOP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c157) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e161); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f488(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesev_inst() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSEV();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f489(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSEV() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c158) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f490(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesevl_inst() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSEVL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f491(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSEVL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c159) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e163); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f492(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmc_inst() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSMC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseimm();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f493(s2, s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSMC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c160) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f494(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesvc_inst() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseSVC();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseimm();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f495(s2, s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSVC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c161) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f496(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewfe_inst() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseWFE();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f497(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWFE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c162) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e166); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f498(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewfi_inst() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseWFI();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f499(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWFI() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c163) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e167); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f500(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseyield_inst() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseYIELD();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecc();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseq();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f501(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseYIELD() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c164) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e168); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f502(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesh() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseshift();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c165) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e169); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseimm();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f503(s2, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop2_arithmetic() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseshift_op();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f504(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseextend_op();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f505(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseextend_xtx();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f506(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseop2_logic() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseshift_op();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f507(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseshift_ror_op();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f508(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsemask() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseimm();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f509(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseaddr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parselbracket();
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parsers64();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseshift_op();
          if (s6 === peg$FAILED) {
            s6 = peg$parseextend_xtx_op();
            if (s6 === peg$FAILED) {
              s6 = peg$parseextend_op();
              if (s6 === peg$FAILED) {
                s6 = peg$parsers64();
              }
            }
          }
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parserbracket();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f510(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$currPos;
      s3 = peg$parselbracket();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsers64();
        if (s4 !== peg$FAILED) {
          s5 = peg$parserbracket();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecomma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseimm();
              if (s7 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6, s7];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f511(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        s2 = peg$parselbracket();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsers64();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parsecomma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseimm();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parserbracket();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexcl();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f512(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          s2 = peg$parserel();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f513(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseshift_op() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsers64();
    if (s1 === peg$FAILED) {
      s1 = peg$parsers32();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomma();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseshift();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseimm();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f514(s1, s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }

    return s0;
  }

  function peg$parseshift_ror_op() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsers64();
    if (s1 === peg$FAILED) {
      s1 = peg$parsers32();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomma();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseshift_ror();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseimm();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f515(s1, s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e171); }
    }

    return s0;
  }

  function peg$parseextend_op() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsers32();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomma();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseextend();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseimm();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f516(s1, s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }

    return s0;
  }

  function peg$parseextend_xtx_op() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsers64();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomma();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseextend_xtx();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseimm();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f517(s1, s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }

    return s0;
  }

  function peg$parserel() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseconstant();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f518(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseimm();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f519(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseprfop() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 9);
    if (s2.toLowerCase() === peg$c166) {
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e173); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f520();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 8);
      if (s2.toLowerCase() === peg$c167) {
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e174); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f521();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        s2 = input.substr(peg$currPos, 8);
        if (s2.toLowerCase() === peg$c168) {
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f522();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          s2 = input.substr(peg$currPos, 8);
          if (s2.toLowerCase() === peg$c169) {
            peg$currPos += 8;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e176); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f523();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            s2 = input.substr(peg$currPos, 9);
            if (s2.toLowerCase() === peg$c170) {
              peg$currPos += 9;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e177); }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f524();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parse_();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parse_();
              }
              s2 = input.substr(peg$currPos, 8);
              if (s2.toLowerCase() === peg$c171) {
                peg$currPos += 8;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e178); }
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f525();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parse_();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parse_();
                }
                s2 = input.substr(peg$currPos, 9);
                if (s2.toLowerCase() === peg$c172) {
                  peg$currPos += 9;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e179); }
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f526();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parse_();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parse_();
                  }
                  s2 = input.substr(peg$currPos, 8);
                  if (s2.toLowerCase() === peg$c173) {
                    peg$currPos += 8;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e180); }
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f527();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    s2 = peg$parse_();
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$parse_();
                    }
                    s2 = input.substr(peg$currPos, 9);
                    if (s2.toLowerCase() === peg$c174) {
                      peg$currPos += 9;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e181); }
                    }
                    if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f528();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = [];
                      s2 = peg$parse_();
                      while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parse_();
                      }
                      s2 = input.substr(peg$currPos, 8);
                      if (s2.toLowerCase() === peg$c175) {
                        peg$currPos += 8;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e182); }
                      }
                      if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f529();
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = [];
                        s2 = peg$parse_();
                        while (s2 !== peg$FAILED) {
                          s1.push(s2);
                          s2 = peg$parse_();
                        }
                        s2 = input.substr(peg$currPos, 9);
                        if (s2.toLowerCase() === peg$c176) {
                          peg$currPos += 9;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e183); }
                        }
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f530();
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = [];
                          s2 = peg$parse_();
                          while (s2 !== peg$FAILED) {
                            s1.push(s2);
                            s2 = peg$parse_();
                          }
                          s2 = input.substr(peg$currPos, 8);
                          if (s2.toLowerCase() === peg$c177) {
                            peg$currPos += 8;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e184); }
                          }
                          if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f531();
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = [];
                            s2 = peg$parse_();
                            while (s2 !== peg$FAILED) {
                              s1.push(s2);
                              s2 = peg$parse_();
                            }
                            s2 = input.substr(peg$currPos, 3);
                            if (s2.toLowerCase() === peg$c178) {
                              peg$currPos += 3;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e185); }
                            }
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f532();
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebarrierop() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c179) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$currPos;
      s5 = peg$parsecomma();
      if (s5 !== peg$FAILED) {
        s6 = [];
        s7 = peg$parse_();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$parse_();
        }
        s7 = input.substr(peg$currPos, 2);
        if (s7.toLowerCase() === peg$c114) {
          peg$currPos += 2;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e116); }
        }
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parse_();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parse_();
          }
          s7 = input.substr(peg$currPos, 2);
          if (s7.toLowerCase() === peg$c121) {
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e123); }
          }
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f533();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c180) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e187); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$currPos;
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parse_();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parse_();
          }
          s7 = input.substr(peg$currPos, 2);
          if (s7.toLowerCase() === peg$c114) {
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e116); }
          }
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            s7 = input.substr(peg$currPos, 2);
            if (s7.toLowerCase() === peg$c121) {
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e123); }
            }
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f534();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        s2 = input.substr(peg$currPos, 3);
        if (s2.toLowerCase() === peg$c181) {
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e188); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          s4 = peg$currPos;
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            s7 = input.substr(peg$currPos, 2);
            if (s7.toLowerCase() === peg$c114) {
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e116); }
            }
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsecomma();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              s7 = input.substr(peg$currPos, 2);
              if (s7.toLowerCase() === peg$c121) {
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e123); }
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f535();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          s2 = input.substr(peg$currPos, 2);
          if (s2.toLowerCase() === peg$c114) {
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e116); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f536();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            s2 = input.substr(peg$currPos, 2);
            if (s2.toLowerCase() === peg$c121) {
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e123); }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f537();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parse_();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parse_();
              }
              s2 = input.substr(peg$currPos, 2);
              if (s2.toLowerCase() === peg$c182) {
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e189); }
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f538();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseshift() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c80) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f539();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c81) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f540();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        s2 = input.substr(peg$currPos, 3);
        if (s2.toLowerCase() === peg$c76) {
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e78); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f541();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseshift_ror() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c89) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f542();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseshift_rrx() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c183) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e190); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f543();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseextend() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c184) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e191); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f544();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c185) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e192); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f545();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        s2 = input.substr(peg$currPos, 4);
        if (s2.toLowerCase() === peg$c186) {
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e193); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f546();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          s2 = input.substr(peg$currPos, 4);
          if (s2.toLowerCase() === peg$c187) {
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e194); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f547();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            s2 = input.substr(peg$currPos, 4);
            if (s2.toLowerCase() === peg$c188) {
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e195); }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f548();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parse_();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parse_();
              }
              s2 = input.substr(peg$currPos, 4);
              if (s2.toLowerCase() === peg$c74) {
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e76); }
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f549();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseextend_xtx() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c189) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e196); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f550();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c190) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e197); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f551();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsers64() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parser64();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f552(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f553(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsexzr();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f554(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselr();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f555(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsefp();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f556(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsepc();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f557(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsespsr_el();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f558(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseelr_el();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f559(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsesp_el();
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f560(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsesps_el();
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f561(s1);
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsecurrentel();
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f562(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsedaif();
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f563(s1);
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsenzcv();
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f564(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parsefpcr();
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f565(s1);
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parsefpsr();
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f566(s1);
                                }
                                s0 = s1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsers32() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parser32();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f567(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsewsp();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f568(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsewzr();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f569(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parser64() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c138) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e142); }
    }
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c191) {
        s3 = peg$c191;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e199); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = input.charAt(peg$currPos);
        if (peg$r2.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e200); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r3.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e201); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e201); }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f570();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }

    return s0;
  }

  function peg$parser32() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c192) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c191) {
        s3 = peg$c191;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e199); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = input.charAt(peg$currPos);
        if (peg$r2.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e200); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r3.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e201); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e201); }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f571();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e202); }
    }

    return s0;
  }

  function peg$parsesp() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c193) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f572();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }

    return s0;
  }

  function peg$parsewsp() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c194) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e206); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f573();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }

    return s0;
  }

  function peg$parsexzr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c195) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f574();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }

    return s0;
  }

  function peg$parsewzr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c196) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e209); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f575();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }

    return s0;
  }

  function peg$parselr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c197) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e211); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f576();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e210); }
    }

    return s0;
  }

  function peg$parsefp() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c198) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e213); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f577();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e212); }
    }

    return s0;
  }

  function peg$parsepc() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c199) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e215); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f578();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e214); }
    }

    return s0;
  }

  function peg$parsesysreg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsesps_el();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f579(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseelr_el();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f580(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsespsr_el();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f581(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsesp_el();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f582(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecurrentel();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f583(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsedaif();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f584(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsenzcv();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f585(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsefpcr();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f586(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsefpsr();
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f587(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsepmcr();
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f588(s1);
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsepmcntenset();
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f589(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsepmcntenclr();
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f590(s1);
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsepmcnten();
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f591(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parsepmovsclr();
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f592(s1);
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parsepmswinc();
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f593(s1);
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parsepmselr();
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f594(s1);
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parsepmceid0();
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$f595(s1);
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parsepmceid1();
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f596(s1);
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parsepmceid();
                                        if (s1 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$f597(s1);
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parsepmccntr();
                                          if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$f598(s1);
                                          }
                                          s0 = s1;
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parsepmxevtyper();
                                            if (s1 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$f599(s1);
                                            }
                                            s0 = s1;
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parsepmxevcntr();
                                              if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$f600(s1);
                                              }
                                              s0 = s1;
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parsepmuserenr();
                                                if (s1 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$f601(s1);
                                                }
                                                s0 = s1;
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parsepmovsset();
                                                  if (s1 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$f602(s1);
                                                  }
                                                  s0 = s1;
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parsepmintenset();
                                                    if (s1 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$f603(s1);
                                                    }
                                                    s0 = s1;
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parsepmintenclr();
                                                      if (s1 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$f604(s1);
                                                      }
                                                      s0 = s1;
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parsepmevcntr();
                                                        if (s1 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s1 = peg$f605(s1);
                                                        }
                                                        s0 = s1;
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parsepmevtyper();
                                                          if (s1 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$f606(s1);
                                                          }
                                                          s0 = s1;
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parsepmccfiltr();
                                                            if (s1 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$f607(s1);
                                                            }
                                                            s0 = s1;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesysregM() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedaifset();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f608(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedaifclr();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f609(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsespsel();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f610(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseatsy() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c200) {
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e216); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (s2.toLowerCase() === peg$c201) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e217); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c202) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e218); }
      }
      if (s3 !== peg$FAILED) {
        s4 = input.charAt(peg$currPos);
        if (peg$r4.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e219); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = input.charAt(peg$currPos);
        if (peg$r5.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e220); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f611();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesy() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c182) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e189); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f612();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespsr_el() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 7);
    if (s2.toLowerCase() === peg$c203) {
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e223); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f613();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e221); }
    }

    return s0;
  }

  function peg$parseelr_el() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c204) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e225); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e223); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f614();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e224); }
    }

    return s0;
  }

  function peg$parsesp_el() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c205) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e227); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r7.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e228); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f615();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e226); }
    }

    return s0;
  }

  function peg$parsesps_el() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c206) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e230); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r4.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e219); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f616();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e229); }
    }

    return s0;
  }

  function peg$parsecurrentel() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 9);
    if (s2.toLowerCase() === peg$c207) {
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e232); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f617();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e231); }
    }

    return s0;
  }

  function peg$parsedaif() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c208) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e234); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f618();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e233); }
    }

    return s0;
  }

  function peg$parsenzcv() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c209) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e236); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f619();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e235); }
    }

    return s0;
  }

  function peg$parsefpcr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c210) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e238); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f620();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e237); }
    }

    return s0;
  }

  function peg$parsefpsr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c211) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e240); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f621();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e239); }
    }

    return s0;
  }

  function peg$parsepmcr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 8);
    if (s2.toLowerCase() === peg$c212) {
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e242); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f622();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e241); }
    }

    return s0;
  }

  function peg$parsepmcntenset() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 14);
    if (s2.toLowerCase() === peg$c213) {
      peg$currPos += 14;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e244); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f623();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e243); }
    }

    return s0;
  }

  function peg$parsepmcntenclr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 14);
    if (s2.toLowerCase() === peg$c214) {
      peg$currPos += 14;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e246); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f624();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e245); }
    }

    return s0;
  }

  function peg$parsepmcnten() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c215) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e248); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f625();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e247); }
    }

    return s0;
  }

  function peg$parsepmovsclr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 12);
    if (s2.toLowerCase() === peg$c216) {
      peg$currPos += 12;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e250); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f626();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e249); }
    }

    return s0;
  }

  function peg$parsepmswinc() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c217) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e252); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f627();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e251); }
    }

    return s0;
  }

  function peg$parsepmselr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 10);
    if (s2.toLowerCase() === peg$c218) {
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e254); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f628();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e253); }
    }

    return s0;
  }

  function peg$parsepmceid0() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c219) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e256); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f629();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e255); }
    }

    return s0;
  }

  function peg$parsepmceid1() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c220) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e258); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f630();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e257); }
    }

    return s0;
  }

  function peg$parsepmceid() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 10);
    if (s2.toLowerCase() === peg$c221) {
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e260); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f631();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e259); }
    }

    return s0;
  }

  function peg$parsepmccntr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c222) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e262); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f632();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e261); }
    }

    return s0;
  }

  function peg$parsepmxevtyper() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 14);
    if (s2.toLowerCase() === peg$c223) {
      peg$currPos += 14;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e264); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f633();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e263); }
    }

    return s0;
  }

  function peg$parsepmxevcntr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 13);
    if (s2.toLowerCase() === peg$c224) {
      peg$currPos += 13;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e266); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f634();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e265); }
    }

    return s0;
  }

  function peg$parsepmuserenr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 13);
    if (s2.toLowerCase() === peg$c225) {
      peg$currPos += 13;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e268); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f635();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e267); }
    }

    return s0;
  }

  function peg$parsepmovsset() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 12);
    if (s2.toLowerCase() === peg$c226) {
      peg$currPos += 12;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e270); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f636();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e269); }
    }

    return s0;
  }

  function peg$parsepmintenset() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 14);
    if (s2.toLowerCase() === peg$c227) {
      peg$currPos += 14;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e272); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f637();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e271); }
    }

    return s0;
  }

  function peg$parsepmintenclr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 14);
    if (s2.toLowerCase() === peg$c228) {
      peg$currPos += 14;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e274); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f638();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e273); }
    }

    return s0;
  }

  function peg$parsepmevcntr() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 8);
    if (s2.toLowerCase() === peg$c229) {
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e275); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r8.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e276); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = input.charAt(peg$currPos);
        if (peg$r9.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e277); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r3.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e201); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e201); }
          }
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.substr(peg$currPos, 4);
      if (s4.toLowerCase() === peg$c230) {
        peg$currPos += 4;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e278); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f639();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e265); }
    }

    return s0;
  }

  function peg$parsepmevtyper() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 9);
    if (s2.toLowerCase() === peg$c231) {
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e279); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r8.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e276); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = input.charAt(peg$currPos);
        if (peg$r9.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e277); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r3.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e201); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e201); }
          }
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.substr(peg$currPos, 4);
      if (s4.toLowerCase() === peg$c230) {
        peg$currPos += 4;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e278); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f640();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e263); }
    }

    return s0;
  }

  function peg$parsepmccfiltr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 13);
    if (s2.toLowerCase() === peg$c232) {
      peg$currPos += 13;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e281); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f641();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e280); }
    }

    return s0;
  }

  function peg$parsedaifset() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 7);
    if (s2.toLowerCase() === peg$c233) {
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e283); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f642();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e282); }
    }

    return s0;
  }

  function peg$parsedaifclr() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 7);
    if (s2.toLowerCase() === peg$c234) {
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e285); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f643();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e284); }
    }

    return s0;
  }

  function peg$parsespsel() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c206) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e230); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f644();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e286); }
    }

    return s0;
  }

  function peg$parsecc() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c235) {
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e288); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f645();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c236) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e289); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f646();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 2);
        if (s1.toLowerCase() === peg$c237) {
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e290); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f647();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 2);
          if (s1.toLowerCase() === peg$c238) {
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e291); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f648();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 2);
            if (s1.toLowerCase() === peg$c239) {
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e292); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f649();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 2);
              if (s1.toLowerCase() === peg$c240) {
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e293); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f650();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 2);
                if (s1.toLowerCase() === peg$c241) {
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e294); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f651();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 2);
                  if (s1.toLowerCase() === peg$c242) {
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e295); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f652();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = input.substr(peg$currPos, 2);
                    if (s1.toLowerCase() === peg$c243) {
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e296); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f653();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = input.substr(peg$currPos, 2);
                      if (s1.toLowerCase() === peg$c244) {
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e297); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f654();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = input.substr(peg$currPos, 2);
                        if (s1.toLowerCase() === peg$c245) {
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e298); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f655();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = input.substr(peg$currPos, 2);
                          if (s1.toLowerCase() === peg$c246) {
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e299); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f656();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = input.substr(peg$currPos, 2);
                            if (s1.toLowerCase() === peg$c247) {
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e300); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f657();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = input.substr(peg$currPos, 2);
                              if (s1.toLowerCase() === peg$c248) {
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e301); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f658();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = input.substr(peg$currPos, 2);
                                if (s1.toLowerCase() === peg$c249) {
                                  peg$currPos += 2;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e302); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f659();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = input.substr(peg$currPos, 2);
                                  if (s1.toLowerCase() === peg$c250) {
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e303); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f660();
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = input.substr(peg$currPos, 2);
                                    if (s1.toLowerCase() === peg$c251) {
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e304); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$f661();
                                    }
                                    s0 = s1;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e287); }
    }

    return s0;
  }

  function peg$parseq() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c252) {
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e306); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f662();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c253) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e307); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f663();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e305); }
    }

    return s0;
  }

  function peg$parseimm() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseiident();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f664(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseichar();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f665(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseibin();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f666(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseihex();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f667(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseioct();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f668(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseiint();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f669(s1);
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseiint() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c165) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseint();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f670(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e308); }
    }

    return s0;
  }

  function peg$parseihex() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c165) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parsehex();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f671(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e309); }
    }

    return s0;
  }

  function peg$parseioct() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c165) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseoct();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f672(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e310); }
    }

    return s0;
  }

  function peg$parseibin() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c165) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parsebin();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f673(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e311); }
    }

    return s0;
  }

  function peg$parseichar() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c165) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parsechar();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f674(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e312); }
    }

    return s0;
  }

  function peg$parseiident() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c165) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseidentifier();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f675(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e313); }
    }

    return s0;
  }

  function peg$parseconstant() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.charCodeAt(peg$currPos) === 61) {
      s2 = peg$c254;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e315); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseidentifier();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f676(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e314); }
    }

    return s0;
  }

  function peg$parsevalue() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f677(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f678(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsechar();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f679(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseoct();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f680(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsehex();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f681(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsebin();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f682(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseint();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f683(s1);
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e316); }
    }

    return s0;
  }

  function peg$parselabel() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$currPos;
    s3 = input.charAt(peg$currPos);
    if (peg$r10.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e318); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r11.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e319); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r11.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e319); }
        }
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c255;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e320); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f684();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e317); }
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (peg$r10.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e318); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r11.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e319); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r11.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e319); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f685();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e321); }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c256;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e323); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r12.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e324); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r12.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e324); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s4 = peg$c256;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e323); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f686();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e322); }
    }

    return s0;
  }

  function peg$parsechar() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c257;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e326); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r13.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e327); }
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s4 = peg$c257;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e326); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f687();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e325); }
    }

    return s0;
  }

  function peg$parseoct() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.charCodeAt(peg$currPos) === 48) {
      s2 = peg$c258;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e329); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r14.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e330); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r14.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e330); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f688();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e328); }
    }

    return s0;
  }

  function peg$parsehex() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.substr(peg$currPos, 2) === peg$c259) {
      s2 = peg$c259;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e332); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r15.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e333); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r15.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e333); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f689();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e331); }
    }

    return s0;
  }

  function peg$parsebin() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.substr(peg$currPos, 2) === peg$c260) {
      s2 = peg$c260;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e335); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r16.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e336); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r16.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e336); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f690();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e334); }
    }

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (peg$r17.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e338); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = [];
    s4 = input.charAt(peg$currPos);
    if (peg$r3.test(s4)) {
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e201); }
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r3.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e201); }
        }
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f691();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e337); }
    }

    return s0;
  }

  function peg$parseblank_line() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parsecomment();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.charCodeAt(peg$currPos) === 10) {
      s3 = peg$c0;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parse_();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parse_();
      }
      peg$savedPos = s0;
      s0 = peg$f692();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e339); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parselcomment();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f693(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsemcomment();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f694(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e340); }
    }

    return s0;
  }

  function peg$parselcomment() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c261) {
      s3 = peg$c261;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e342); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r18.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e343); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r18.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e343); }
        }
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f695();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c262;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e344); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r18.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e343); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r18.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e343); }
          }
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f696();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e341); }
    }

    return s0;
  }

  function peg$parsemcomment() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.substr(peg$currPos, 2) === peg$c263) {
      s2 = peg$c263;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e346); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r19.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e347); }
      }
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = input.charAt(peg$currPos);
        if (peg$r20.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e348); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = input.charAt(peg$currPos);
            if (peg$r20.test(s6)) {
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e348); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = input.charAt(peg$currPos);
          if (peg$r21.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e349); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r19.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e347); }
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = input.charAt(peg$currPos);
          if (peg$r20.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e348); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = input.charAt(peg$currPos);
              if (peg$r20.test(s6)) {
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e348); }
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = input.charAt(peg$currPos);
            if (peg$r21.test(s6)) {
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e349); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      }
      s4 = [];
      if (input.substr(peg$currPos, 2) === peg$c264) {
        s5 = peg$c264;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e350); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (input.substr(peg$currPos, 2) === peg$c264) {
            s5 = peg$c264;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e350); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f697();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e345); }
    }

    return s0;
  }

  function peg$parseequal() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.charCodeAt(peg$currPos) === 61) {
      s2 = peg$c254;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e315); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f698();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e351); }
    }

    return s0;
  }

  function peg$parsexor() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c265) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e353); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f699(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e352); }
    }

    return s0;
  }

  function peg$parseneg() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c266) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e355); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f700(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e354); }
    }

    return s0;
  }

  function peg$parseo() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c267) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e357); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f701(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e356); }
    }

    return s0;
  }

  function peg$parsey() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c268) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e359); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f702(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e358); }
    }

    return s0;
  }

  function peg$parseplus() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c269) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e361); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f703(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e360); }
    }

    return s0;
  }

  function peg$parselbracket() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c270) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e363); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f704(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e362); }
    }

    return s0;
  }

  function peg$parserbracket() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c271) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e365); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f705(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e364); }
    }

    return s0;
  }

  function peg$parseexcl() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c272) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e367); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f706(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e366); }
    }

    return s0;
  }

  function peg$parsecomma() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c273;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e369); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f707(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e368); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r22.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e371); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r22.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e371); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f708();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e370); }
    }

    return s0;
  }

  function peg$parseEOI() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e373); }
    }
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e372); }
    }

    return s0;
  }


    const root = createNode(TYPE.ROOT, '#RAIZ', 'Raiz del Arbol Concreto');

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  return {
    StartRules: ["start"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()
;
